{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial: Neural Networks for Image Classification with Convolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change directory, only necessary for this notebook\n",
    "import sys, os\n",
    "sys.path.insert(0,os.path.abspath('../../../'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import mnist\n",
    "import scipy.misc\n",
    "\n",
    "from PIL import Image\n",
    "\n",
    "from pyml.neural_network.nn import NN\n",
    "from pyml.neural_network.layer.transformation import *\n",
    "from pyml.neural_network.layer.activation import *\n",
    "from pyml.neural_network.optimizer import *\n",
    "from pyml.neural_network.loss import *\n",
    "from pyml.utils.accuracy import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/var/folders/kt/fz2n770s5nl7x9529l2zhpww0000gn/T'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images = mnist.train_images()\n",
    "train_labels = mnist.train_labels()\n",
    "\n",
    "test_images = mnist.test_images()\n",
    "test_labels = mnist.test_labels()\n",
    "\n",
    "def preprocess_binary_data(x, y, limit):\n",
    "    zero_index = np.where(y == 0)[0][:limit]\n",
    "    one_index = np.where(y == 1)[0][:limit]\n",
    "    all_indices = np.hstack((zero_index, one_index))\n",
    "    all_indices = np.random.permutation(all_indices)\n",
    "    x, y = x[all_indices], y[all_indices]\n",
    "    x = x.reshape(len(x), 1, 28, 28)\n",
    "    # x = x.astype(\"float32\") / 255\n",
    "    return x, y\n",
    "\n",
    "def preprocess_data(x, y, limit):\n",
    "    x = x.reshape(len(x), 1, 28, 28)\n",
    "    # x = x.astype(\"float32\") / 255\n",
    "    return x, y\n",
    "\n",
    "train_images, train_labels = preprocess_data(train_images, train_labels, 1000)\n",
    "test_images, test_labels = preprocess_data(test_images, test_labels, 1000)\n",
    "\n",
    "mnist.temporary_dir()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalize data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images = (train_images.astype('float32') - 127.5) / 127.5\n",
    "test_images = (test_images.astype('float32') - 127.5) / 127.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image of the number 4\n"
     ]
    },
    {
     "data": {
      "image/jpeg": "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",
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOAAAADgCAAAAAA/RjU9AAATN0lEQVR4Ae2diZbauBKGbbxgoJfMnLn3/R8x6WYxeLvfXzJLupm0jZQLJ8dKB2jjRX9VqTaV1FE0tYkCEwUmCkwUmCgwUWCiwESBiQITBSYKTBSYKDBRYKLARIGJAhMFJgpMFJgoMFFgosBEgYkCEwUmCkwUmCgwUeD/QYH4//GQwc+IXeP8Lur46f8Nvv7KiemVY/c7NEuzNE1ncdS1bdP2rWt9OvRQAON0XiyKeTqL2rqu6rpu7H/ceSB8KIBRUjw/Py/nSddU+/3+cKgO+9mh/ZM4WDz//dfrIu3q/Xa72+3LMo7b5g/iYArA//69yrt9uX5fb3bprGvrykNAo+ihRHSWFU/f/vnPCwA3izxNkqitqkPspekfC2BarF7++udb3u2KJGrarq7KdDZ7JA6K2PovvTdW98VRkubF6vn1dd5mcVUu9vssTTzxBRdRs9Syz2anR9A+juJZkuXFYrl6mjdxXeQp6GJsopeEhgYYz2YzjRkMdTuCg3HX48vzeVEU86bG4Cci1ggSXT818BiECxKqDt1ubtb1h34+Kny4MVk+n8/zPAdfwg2sfT551JGwAOM4kWBFXRM33XAWwieYxQjM80wt7ZBM8EkMEHWvFhhgAhfkacHAdqR4xeKg0GEeWnNH5Y2KiY8DUPzL8izBOouJwz0QY6EBxNdOkqQ+MXC4GPwLGUJyUKOIQQTAZtY2DKIRLWYMJmATvGSG+nwwEZUyp1/owHmRJUho21RjDTQKGIDWaj6PoM6vTg3DQUyD9Q4zVsDBto7bCi3/qwd//A4tI4T8d28hTISeEQQgfUOwsjSbLwCYz9pD3BxQpsMbxAARZt0B5IMjj5+CCQYwig1dluGHCGCzj6o9ynRwg9ditwRdOC9476tEA3HQtEuR54vFcjHP4iZt95kpisEQzRIe8Qml4bXL/bgYREQjvEikk3zDEg5mUT2rdwAchU4ni4PHdsnG47Fb3sMBLJaLYrlcEMdFVbQnmrsQtAE96wXTEEpQB1wy6JQgAHGz4CDo+CnypEubOf7MGA6e+2pAg8ELpEURUSI5B3Cezbo4QBx3huz3KRwHNQAXy/k8wchjzi7H08guhhp+9tggAKVkFKpqBMLAm0aQvOqzX/1gY1B20FQoNoJEUTM6W+HyG0oC+NmEK6IShINEOmlOrgEGIqCWrxjZUyJ6XSGI9nqlpzceCgLwxEGMPFEqOtB6O6pLYp3AGfcvhHXUTa6cHAbgcQzOEdCaQPDKg746pGv4f8ulv7x1EIBmB6VksIH1jEBitBaFJjKA9vbL/o7+MgjAox1cEkjUFTMnGY7aODvfhxEyL2FbEICOg8vVMgNgjZ7Zz0lcjOirhYIKdRUPhoUYBKBztpdPyzTumjpPooPsxXAWIp/oYeWcNPuJnP5kE/04GgwgrtpKANu2SuP9Cp97BCsUMAOPpCHD1w/Qx6uDAFTSHWd7tQJT1zVJVP5gnnaEMiWWx5KCzzgoW2EW42Nnb/k9CEDsYJrPF6ulxIuEaLtZFkqPDm4/cZBbBLT2QQBaVpqId2GBXNceiHrHxIOfxqBxcDB5fnliEIARGVEkbD63mLxD0hhKIyRUExNEXA+sRQ0hGsJoeYsvahAtoxbWSIQKeJXTJGkrfG1bq0Ciahp5l4ObcNkIHsP4IXcPI6L0rbfQXVXt1+vNtjwwAz2kAxfn9C52WB4GAUiXoL51rN7vdj9+vK13+6q56PuXH820u5ewDncQgOfudxX1H9+//3jflNUoDp4AykaIWn0T6c63v+HTCGP1y7urG4hkc9itf3z//va+hYMjRJRTe/aNuOiXHTp+GQog95P30VCi9P729r7Z7utxFVg9MN78OHYEdnwPCFAcbOtDuaExBGsBHtqO4SCCEBZfFBKg0DAvSB1dVdXjlKhZek19jgwjvyZgYIAqHKibBnjMrn/99OMZWJl+6tNyAcfDId7DAexF66gOR3VO+IiWFE6Yi6ebjLrBv58cDuDPzxg3kgygKmSU8z8p1J/veONv4QD2JEfa7GcMQkko/HMIz16646MnL8MBNDtoLg1pFSLfUQiJRqzKSRzkQoMWRkiDAXQZW2BJIcIF2nChMhG1OicDaNDC4AtuJs5u1nB4YrtYeEw69Rwcc4N/PzcYB//9EUO+gemngHfI+cPPeQyAEmzqiFyJkxPt3tkeIefXQQcB6Kno6JngaOw69QRe97vePCEGAahBc51+Q486PIZPiITLioKkjP0QBgLY24iheD6c10MSrOM3+mzteODW92AAb+2AXSeExjZhcndyv/P5hPm2JzwGQKHo+dXjwdS3rmbYU/iDAAwgS3YLvcAnfAZqfRWTKChRmOnRggD0eP7VSwWvrtQUd109ZfDBIAB9OSjX80IPI501UfOO1VmHuvZEGASgKQIPZQDHiI/txeTRAG436/W23NfNBfTBfDufGCRt6GurBFDtuBKBWdT9brN+f9uVpMj9ZDQMwF47OLrdoBScjIJPkgovm8N+u3l/e7c5gPtz0NL26D8npDfggzAGUa/CxxAsd+v12xtKBjVzlrcbPoXgoLxkRYDmztyEzxxRRyLwxaiYcrtligMNI7begOt0SQiACnQSV/96W2egkGtg7JiWqg6HfYkS3YqhnnbQE6DkMlYo7lINJ7pd+yAJ5n//dskWy8dQeeJWBVXxnsW7JZNw9bXbjDzmB1AufzxjPVxfFmMjSS+mFD9OL0kVXSYzhFH/Y4rZadSzU4HSVF233Wx3JbnxkViunu4FUEOHxTgF9egglHxZc+iaj5MTHadbTOvyZiZ7JtKznAKNp6fVaklpRrM/NGYBD/VHAl0F8NVBL4CauSZfu6IQVkXaPMtpehjY4Et+fDaJF9ZXUCliFTTCJnpEUZI/PT0/v7w8UZsRoVcO67c102+1uOvd/ABSCMtypdVqZZVNsWOge/0M8Jg6QyNJ4RpA/LAuTuago7FFQBrXbVW+v62ZfvMzD0fKeAGky1YA9KThIw5eIjw+4fROdn5OcrdQpZ54zfhrO00ipsXLy+srHCyoh26qnQwEU+BBGOi58oUCIOp/GD4L1pwZwD6uM8N2gqYPsSqZtEB3kedngC2eZpwVhu95pWpMJqd2pmIeAaDjIBKKejAlY0is4IKVWtn+jDBWJVqeF6oW6pktA85YdQCRz+fVChXTMsVoYdK46bfzkz5+8hLRaGYVXMZBE1HuLr2qLPxicWAFjMwkx1ypHQBRuNcAPr08I+ZsDlCxrtJ8oo/9vPl3L4CoxRwJZfQcqwtNkYBuyRR9nFPcbIkyA5jmLD2YLySiNlwdB3llk5XVy+sziirp4hbiVBVWZ0yx4q/QewGMkqxYPr2+fnt9WmgXGBgmtVMgY22UzMsWZFqzqkovS82jYuQUpE6LSskYwGyBmVgVc5bT24Go3LBPgO7n37wAxrNsvnx+/fbNaXgpGAzjfIGLrH03Dp0rAk3BCVAw2hQZWvQIEJdHZkI7PCC6VJsCioWy6WGzQmtxln/zA5ikcPDl2ys2Gg4qHNASmBpGZsWqrCNZSa1alt6ZpTbBgoDimPdmwllDjdo51bCzuCN5n+WLbL9eFfkDcDCCg4xB7eLjzISGYF40vBaMwhYDgIs5hzVKUyexGElNL1aCZfZyQ12owLccdBODjOqiycofD8JB0ZtVZ1pU5yRKaqfpkMViSSFQYnXOkj01YBkn+9DR2XFGnWlapzphoXyF2ftRad1ZRKVTXPGAbaWlMQgHWwNILiVOtN4HJ4BxgFDajhxC6nr92VERVGutFdQ+gojSHfWY5npm3ncb1WlFLIH2IA7CE8/7L3nDKJiPJuk8N4squdMR4OUdz2fd9slLyWjXEfYHcwla0R97QMYhcTlpVXJj91jT2zeMgnLVbOPBAZZj6ZV/wJGa7StkUKyUZCqpfUmC/g43vPkCpHRrt8N/xgbw9DgFZZLapm/quaalnaQpRtQuafSdXC59JzrkAmXmZTvNfsjyKdCq5Yv65kOPtPACSIL2UJKgzbBxmTEqRmGKS9hvMQClwr5T1OiJdUK3L/cH1SHypVVTcKJMC2sunlbaNEcp36qilk8Ftcc+er17AcQxJkH7PsfG4ZSaSMVp4jJhYNBPTNyr6i5tclfBbXZLgzvqu8ym+CWH9un1W817xB4fpJv2VCuqoNZu6IWOi70AEryV23eiOPyXomjcvbBpZr+JC+CbhmOlf8LHbnDvVCLuVCurbE7E9zg9efHt7yrGKYCB1WG327y9r3eHjxmPG5F6ARQHt2t8GAzeYnGRotD4Ir6PCO/Yv0/Fh/xToLem75udglnNx1NeSpIwyVfrKiEvUGsjGmSePeMQURupN6K6uMwLoOsPbjHaclkeWB55bDLXGnTlgfxfeThoZCF8m/cfINxeAESXJPOnOl29llhORFQIt0y6BJJQPxFV/et+R3SghUvLMu8Nnss8oVUYdOWOHwGUhDJeAbj5BLCev6gEGs0kVcuJh7H1pkfCfn735CCDUClfISReJZEp1WJpQ8aflCYANUUkDap8fC+i5zEoDtbxVhXC6FbxXcaEjTdB+7m3NxzxAqj0wh7XubN9QfPZgXEnzUIngWejbo/SLCscG0Esy80aJWMF+QqFpWQA2KVimSyLkhh2AzM0N8D5fIkXQJbSVcQ4TcNeRyQOozmuTd2rzIrNQQ8H0GmbUPCiT4XQpaxl/cxMyF9pYjdVLY4ZDwUyEP88zYQqtJktqWoHsAMgKECmYaR/euE38VSjS8PLxpewaLG2wyFAR9fAIEr/8i9I8+OgkmJs5grAgoxKM2crJ3QlKGAc6hMWyk+1STAcUYTXNraFa9Z7jVeB4Jsjw8RBa0HA6SZeAOFe286qWW1OtQCidEo2dqWAABcVZjEQYZ+Gl1gjb1u8OuLj+RYO6uszxxzr3Ks/Ti+ABD9E5ugKAluUaJOzVxXemHQnLhkAmUCRr2JepXosaJfwHEJ98dtY6AXQ9TiKcFE26zNAJveA54pAPk/BfGKKVOeng8EOeAJ0/WhZ7lLk8SGLW6y5RLQ3f4O35z1xsFcyR4b64wwCMKpZk5W2u4zYSNEA5kETtKNmMI85gROkQIMwDECmvNZxpc2AsAQyE5VZg1Nnv/xg0e+XZ91yQjCA7O9AYpPQT5ZAbsyIaACnRu2y/z/9cvnF2M9hAEbNvqtLOW3OU5O7hjUY2gj8DeIx6aT8U6gWBmBH2F7JueynG2Tx8MYGQiQLYOXahu8TLz2RhgFI0oU9T43sgDr9DOybq7NxYhqOdf3DwwDsjfdAQBengSeObEWImBgcHU8KA/Ciy6M+khElbGKCpi8lEhdH3eDrk+8KEHDk/hO3Y6AVS4EvMMS7AiQlqhlEm73RzH1iucSvuTLmjLsChIPkU+eqs3HTLUp3S0bx3G4e1h/Q3xWgZi9UaKNKKavnA2CvjD908/Zfw8xR3fh8zbqAULvbGz50TOghGH794CisNq+kGZp+P67wSvTOAEUNc130Moo0g0++q4iiTPBarVnWaXCvR5x4Z4BKZCu9aIlDy4iP6PugU++qRUnJNaT3M6Jjl6yXcRjooQ9Cx0l3Bag8sWxhsVP4r+xiDy+gMr0vQJJNTKSlTNBYAs7su4KRgO2uAIkeDSASyiqsvjghLL57iyg8YxmIVEyfEQ4Mj5nygNJw060klq7ddPmXF90bIAZe6QpLO33Z2VtOuOsYxItBh+KqaWmQVSWEd2fuDvBU7KbEmhIYgdtdAbpogsUGZCxcKdfJAAaz9/cdgypSQ0Jt51TjYHiX+64c1BhUztCGoPRMYPHU7e7LQdMypkF/C7gHAKguHO1gcBuvm9+Zg2AjINRslApj5GsHR3nfMUg4YZVNTCkKojzT0AjvClD8i+tDTDghhAIYHOFdASplwd+5axOryMDf1gpE46ElamwM+b7cGaB4xp+IUUCogHf2h41BxhsllE09Ax/1bPZHJ0NDvDMHtcqAMnZGoKop/zgOMr5gYhcRzbt413fAXbn+zp6M65HV4l3pXIhDDwHQGKlI6Tc4ow8C0FL3+KP2HoJxp3s8BEBn9cLZvhM6PjwOQBdPBBfSxwB4rq8I7Yo+CAdNphRL/GlzE+fBQg0Y7TdUjj6EiMpMwD1VbqNIj3nSM3qfT48BsMen+j3g9aslw+ibxwBo/LPZM6Wh3GrQMPjuPPnSy57Ek9Y0WrGGiCpHGory940mToPLlqpVFStNbCBi83FqTt/6fHgMgErNsJwkZX2y4l6b6Q0UGD4EQPCxNG23jTL+hrbSM1pNEsjkPwTAfi1wxp+F06LgfgFXmMUUDwGw40/FvH/PmkXKtmosAN3YIuUwPHwMgHW5+ZG3W/aEaG1R5foH2449wCpsH+12eS0V++9pV7JpFWqURc2sfH6zlcyXJ934+TE4yFZqUbUuUhaoa5WhFlJu9xerum8Ep8seA2BdRjWLnY8LL+paSyvDiGgYa+pBYV1KXazNEcq2y6mhwkstiJZ5CICWipH3YmtJlLz/HZGhJxemyycKTBSYKDBRYKLARIGJAhMFJgpMFJgoMFFgosBEgYkCEwUGU+B/Eo1kXzOBhagAAAAASUVORK5CYII=",
      "text/plain": [
       "<PIL.Image.Image image mode=L size=224x224>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i = 92\n",
    "resize_factor = 8\n",
    "print(f'Image of the number {train_labels[i]}')\n",
    "img = ((train_images[i] + 127.5) * 127.5 / np.max(train_images[i])).astype('uint8')\n",
    "Image.fromarray(img[0]).resize((28*resize_factor, 28*resize_factor))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build the neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build the model\n",
    "kernel_size = 3\n",
    "in_channels = 1\n",
    "out_channels = 2\n",
    "data_size = 28\n",
    "nb_maxpool = 1\n",
    "out_first_conv = (data_size - kernel_size + 1) // (2*nb_maxpool) - kernel_size + 1\n",
    "out_first_conv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = NN()\n",
    "\n",
    "\n",
    "model.add_layer(\n",
    "    Convolutional(in_channels=in_channels, out_channels=out_channels, kernel_shape=kernel_size),\n",
    ")\n",
    "model.add_layer(ReLU())\n",
    "model.add_layer(\n",
    "    Convolutional(in_channels=out_channels, out_channels=out_channels, kernel_shape=kernel_size)\n",
    ")\n",
    "model.add_layer(ReLU())\n",
    "model.add_layer(Flatten())\n",
    "model.add_layer(Dense(1152, 128))\n",
    "model.add_layer(ReLU())\n",
    "model.add_layer(Dense(128, 10))\n",
    "model.add_layer(ReLU())\n",
    "model.add_layer(Softmax())\n",
    "\n",
    "model.set_loss(CategoricalCrossentropy())\n",
    "model.set_optimizer(Adam(learning_rate=0.001))\n",
    "model.set_accuracy(MultiClassAccuracy())\n",
    "\n",
    "model.build()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.train(\n",
    "    train_images, \n",
    "    train_labels, \n",
    "    validation_data=(test_images, test_labels), \n",
    "    epochs=40, \n",
    "    batch_size=16,\n",
    "    print_summary_every=1, \n",
    "    verbose=1 \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Image of the number 3\n",
      "The prediction is 3\n"
     ]
    },
    {
     "data": {
      "image/jpeg": "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",
      "image/png": "",
      "text/plain": [
       "<PIL.Image.Image image mode=L size=280x280>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i = 5555\n",
    "resize_factor = 10\n",
    "\n",
    "img = (test_images[i].reshape(28, 28) * 255 / np.max(test_images[i])).astype('uint8')\n",
    "\n",
    "pred = np.argmax(model.predict(test_images[i].reshape(1, 1, 28, 28)))\n",
    "\n",
    "print(f'Image of the number {test_labels[i]}')\n",
    "print(f'The prediction is {pred}')\n",
    "\n",
    "Image.fromarray(img).resize((28*resize_factor, 28*resize_factor))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
