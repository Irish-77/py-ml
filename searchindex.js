Search.setIndex({"docnames": ["_autosummary/pyml", "_autosummary/pyml.exceptions", "_autosummary/pyml.exceptions.excpetions", "_autosummary/pyml.exceptions.excpetions.HyperparametersNotSpecified", "_autosummary/pyml.exceptions.excpetions.OutsideSpecifiedRange", "_autosummary/pyml.exceptions.excpetions.ShapeError", "_autosummary/pyml.neighbors", "_autosummary/pyml.neighbors.knn", "_autosummary/pyml.neighbors.knn.UnknownMetric", "_autosummary/pyml.neighbors.knn.kNNClassifier", "_autosummary/pyml.neural_network", "_autosummary/pyml.neural_network.layer", "_autosummary/pyml.neural_network.layer.activation", "_autosummary/pyml.neural_network.layer.activation.linear", "_autosummary/pyml.neural_network.layer.activation.linear.Linear", "_autosummary/pyml.neural_network.layer.activation.relu", "_autosummary/pyml.neural_network.layer.activation.relu.ReLU", "_autosummary/pyml.neural_network.layer.activation.sigmoid", "_autosummary/pyml.neural_network.layer.activation.sigmoid.Sigmoid", "_autosummary/pyml.neural_network.layer.activation.softmax", "_autosummary/pyml.neural_network.layer.activation.softmax.Softmax", "_autosummary/pyml.neural_network.layer.activation.tanh", "_autosummary/pyml.neural_network.layer.activation.tanh.Tanh", "_autosummary/pyml.neural_network.layer.transformation", "_autosummary/pyml.neural_network.layer.transformation.convolutional", "_autosummary/pyml.neural_network.layer.transformation.convolutional.Convolutional", "_autosummary/pyml.neural_network.layer.transformation.dense", "_autosummary/pyml.neural_network.layer.transformation.dense.Dense", "_autosummary/pyml.neural_network.layer.transformation.dropout", "_autosummary/pyml.neural_network.layer.transformation.dropout.Dropout", "_autosummary/pyml.neural_network.layer.transformation.input", "_autosummary/pyml.neural_network.layer.transformation.input.Input", "_autosummary/pyml.neural_network.layer.transformation.reshape", "_autosummary/pyml.neural_network.layer.transformation.reshape.Flatten", "_autosummary/pyml.neural_network.layer.transformation.reshape.Reshape", "_autosummary/pyml.neural_network.loss", "_autosummary/pyml.neural_network.loss.binary_cross_entropy", "_autosummary/pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy", "_autosummary/pyml.neural_network.loss.categorical_cross_entropy", "_autosummary/pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy", "_autosummary/pyml.neural_network.loss.mean_absolute_error", "_autosummary/pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError", "_autosummary/pyml.neural_network.loss.mean_squarred_error", "_autosummary/pyml.neural_network.loss.mean_squarred_error.MeanSquaredError", "_autosummary/pyml.neural_network.loss.softmax_loss_categorical_cross_entropy", "_autosummary/pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy", "_autosummary/pyml.neural_network.nn", "_autosummary/pyml.neural_network.nn.InconsistentLayerSizes", "_autosummary/pyml.neural_network.nn.NN", "_autosummary/pyml.neural_network.optimizer", "_autosummary/pyml.neural_network.optimizer.adagrad", "_autosummary/pyml.neural_network.optimizer.adagrad.Adagrad", "_autosummary/pyml.neural_network.optimizer.adam", "_autosummary/pyml.neural_network.optimizer.adam.Adam", "_autosummary/pyml.neural_network.optimizer.rmsprop", "_autosummary/pyml.neural_network.optimizer.rmsprop.RMSProp", "_autosummary/pyml.neural_network.optimizer.sgd", "_autosummary/pyml.neural_network.optimizer.sgd.SGD", "_autosummary/pyml.utils", "_autosummary/pyml.utils.accuracy", "_autosummary/pyml.utils.accuracy.BinaryClassAccuracy", "_autosummary/pyml.utils.accuracy.MultiClassAccuracy", "_autosummary/pyml.utils.accuracy.RegressionAccuracy", "_autosummary/pyml.utils.metrics", "_autosummary/pyml.utils.metrics.euclidean_distance", "_autosummary/pyml.utils.metrics.manhatten_distance", "api", "index", "notebooks/kNN", "notebooks/nn_classification", "notebooks/nn_image_classification_with_convolution", "notebooks/nn_image_classification_without_convolution", "tutorials"], "filenames": ["_autosummary/pyml.rst", "_autosummary/pyml.exceptions.rst", "_autosummary/pyml.exceptions.excpetions.rst", "_autosummary/pyml.exceptions.excpetions.HyperparametersNotSpecified.rst", "_autosummary/pyml.exceptions.excpetions.OutsideSpecifiedRange.rst", "_autosummary/pyml.exceptions.excpetions.ShapeError.rst", "_autosummary/pyml.neighbors.rst", "_autosummary/pyml.neighbors.knn.rst", "_autosummary/pyml.neighbors.knn.UnknownMetric.rst", "_autosummary/pyml.neighbors.knn.kNNClassifier.rst", "_autosummary/pyml.neural_network.rst", "_autosummary/pyml.neural_network.layer.rst", "_autosummary/pyml.neural_network.layer.activation.rst", "_autosummary/pyml.neural_network.layer.activation.linear.rst", "_autosummary/pyml.neural_network.layer.activation.linear.Linear.rst", "_autosummary/pyml.neural_network.layer.activation.relu.rst", "_autosummary/pyml.neural_network.layer.activation.relu.ReLU.rst", "_autosummary/pyml.neural_network.layer.activation.sigmoid.rst", "_autosummary/pyml.neural_network.layer.activation.sigmoid.Sigmoid.rst", "_autosummary/pyml.neural_network.layer.activation.softmax.rst", "_autosummary/pyml.neural_network.layer.activation.softmax.Softmax.rst", "_autosummary/pyml.neural_network.layer.activation.tanh.rst", "_autosummary/pyml.neural_network.layer.activation.tanh.Tanh.rst", "_autosummary/pyml.neural_network.layer.transformation.rst", "_autosummary/pyml.neural_network.layer.transformation.convolutional.rst", "_autosummary/pyml.neural_network.layer.transformation.convolutional.Convolutional.rst", "_autosummary/pyml.neural_network.layer.transformation.dense.rst", "_autosummary/pyml.neural_network.layer.transformation.dense.Dense.rst", "_autosummary/pyml.neural_network.layer.transformation.dropout.rst", "_autosummary/pyml.neural_network.layer.transformation.dropout.Dropout.rst", "_autosummary/pyml.neural_network.layer.transformation.input.rst", "_autosummary/pyml.neural_network.layer.transformation.input.Input.rst", "_autosummary/pyml.neural_network.layer.transformation.reshape.rst", "_autosummary/pyml.neural_network.layer.transformation.reshape.Flatten.rst", "_autosummary/pyml.neural_network.layer.transformation.reshape.Reshape.rst", "_autosummary/pyml.neural_network.loss.rst", "_autosummary/pyml.neural_network.loss.binary_cross_entropy.rst", "_autosummary/pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.rst", "_autosummary/pyml.neural_network.loss.categorical_cross_entropy.rst", "_autosummary/pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.rst", "_autosummary/pyml.neural_network.loss.mean_absolute_error.rst", "_autosummary/pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.rst", "_autosummary/pyml.neural_network.loss.mean_squarred_error.rst", "_autosummary/pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.rst", "_autosummary/pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.rst", "_autosummary/pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy.rst", "_autosummary/pyml.neural_network.nn.rst", "_autosummary/pyml.neural_network.nn.InconsistentLayerSizes.rst", "_autosummary/pyml.neural_network.nn.NN.rst", "_autosummary/pyml.neural_network.optimizer.rst", "_autosummary/pyml.neural_network.optimizer.adagrad.rst", "_autosummary/pyml.neural_network.optimizer.adagrad.Adagrad.rst", "_autosummary/pyml.neural_network.optimizer.adam.rst", "_autosummary/pyml.neural_network.optimizer.adam.Adam.rst", "_autosummary/pyml.neural_network.optimizer.rmsprop.rst", "_autosummary/pyml.neural_network.optimizer.rmsprop.RMSProp.rst", "_autosummary/pyml.neural_network.optimizer.sgd.rst", "_autosummary/pyml.neural_network.optimizer.sgd.SGD.rst", "_autosummary/pyml.utils.rst", "_autosummary/pyml.utils.accuracy.rst", "_autosummary/pyml.utils.accuracy.BinaryClassAccuracy.rst", "_autosummary/pyml.utils.accuracy.MultiClassAccuracy.rst", "_autosummary/pyml.utils.accuracy.RegressionAccuracy.rst", "_autosummary/pyml.utils.metrics.rst", "_autosummary/pyml.utils.metrics.euclidean_distance.rst", "_autosummary/pyml.utils.metrics.manhatten_distance.rst", "api.md", "index.md", "notebooks/kNN.ipynb", "notebooks/nn_classification.ipynb", "notebooks/nn_image_classification_with_convolution.ipynb", "notebooks/nn_image_classification_without_convolution.ipynb", "tutorials.md"], "titles": ["pyml", "pyml.exceptions", "pyml.exceptions.excpetions", "pyml.exceptions.excpetions.HyperparametersNotSpecified", "pyml.exceptions.excpetions.OutsideSpecifiedRange", "pyml.exceptions.excpetions.ShapeError", "pyml.neighbors", "pyml.neighbors.knn", "pyml.neighbors.knn.UnknownMetric", "pyml.neighbors.knn.kNNClassifier", "pyml.neural_network", "pyml.neural_network.layer", "pyml.neural_network.layer.activation", "pyml.neural_network.layer.activation.linear", "pyml.neural_network.layer.activation.linear.Linear", "pyml.neural_network.layer.activation.relu", "pyml.neural_network.layer.activation.relu.ReLU", "pyml.neural_network.layer.activation.sigmoid", "pyml.neural_network.layer.activation.sigmoid.Sigmoid", "pyml.neural_network.layer.activation.softmax", "pyml.neural_network.layer.activation.softmax.Softmax", "pyml.neural_network.layer.activation.tanh", "pyml.neural_network.layer.activation.tanh.Tanh", "pyml.neural_network.layer.transformation", "pyml.neural_network.layer.transformation.convolutional", "pyml.neural_network.layer.transformation.convolutional.Convolutional", "pyml.neural_network.layer.transformation.dense", "pyml.neural_network.layer.transformation.dense.Dense", "pyml.neural_network.layer.transformation.dropout", "pyml.neural_network.layer.transformation.dropout.Dropout", "pyml.neural_network.layer.transformation.input", "pyml.neural_network.layer.transformation.input.Input", "pyml.neural_network.layer.transformation.reshape", "pyml.neural_network.layer.transformation.reshape.Flatten", "pyml.neural_network.layer.transformation.reshape.Reshape", "pyml.neural_network.loss", "pyml.neural_network.loss.binary_cross_entropy", "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy", "pyml.neural_network.loss.categorical_cross_entropy", "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy", "pyml.neural_network.loss.mean_absolute_error", "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError", "pyml.neural_network.loss.mean_squarred_error", "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError", "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy", "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy", "pyml.neural_network.nn", "pyml.neural_network.nn.InconsistentLayerSizes", "pyml.neural_network.nn.NN", "pyml.neural_network.optimizer", "pyml.neural_network.optimizer.adagrad", "pyml.neural_network.optimizer.adagrad.Adagrad", "pyml.neural_network.optimizer.adam", "pyml.neural_network.optimizer.adam.Adam", "pyml.neural_network.optimizer.rmsprop", "pyml.neural_network.optimizer.rmsprop.RMSProp", "pyml.neural_network.optimizer.sgd", "pyml.neural_network.optimizer.sgd.SGD", "pyml.utils", "pyml.utils.accuracy", "pyml.utils.accuracy.BinaryClassAccuracy", "pyml.utils.accuracy.MultiClassAccuracy", "pyml.utils.accuracy.RegressionAccuracy", "pyml.utils.metrics", "pyml.utils.metrics.euclidean_distance", "pyml.utils.metrics.manhatten_distance", "&lt;no title&gt;", "PyML - a simple machine learning library", "Tutorial: kNN", "Tutorial: Neural Networks for classification", "Tutorial: Neural Networks for Image Classification with Convolution", "Tutorial: Neural Networks for Image Classification without Convolution", "Examples and tutorials"], "terms": {"api": 0, "refer": [0, 8], "document": [0, 8], "packag": [0, 11, 35, 67], "modul": [1, 2, 6, 10, 35, 36, 38, 40, 42, 44, 46, 58, 59, 67], "contain": [1, 2, 18, 20, 35, 36, 37, 38, 39, 40, 42, 44, 48, 59], "custom": [1, 67], "python": [2, 67], "error": [2, 9, 40, 41, 42, 43], "us": [2, 9, 13, 15, 16, 17, 18, 19, 21, 25, 28, 29, 30, 31, 32, 35, 45, 48, 51, 53, 55, 57, 58, 62, 63, 64, 65, 67, 72], "across": [2, 58], "sever": [2, 58], "class": [2, 7, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69], "hyperparamet": [3, 48], "sourc": [3, 4, 5, 8, 9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 47, 48, 51, 53, 55, 57, 60, 61, 62, 64, 65, 67], "rais": [3, 4, 5, 8, 9, 47, 48, 57], "when": [3, 4, 5, 9, 29, 30, 45, 47, 48], "model": [3, 5, 8, 9, 14, 16, 18, 20, 22, 25, 27, 29, 30, 31, 33, 34, 37, 39, 41, 43, 47, 48, 59, 60, 61, 62, 70], "i": [3, 4, 8, 9, 11, 14, 15, 16, 18, 20, 21, 22, 25, 27, 29, 31, 32, 33, 34, 35, 37, 39, 41, 43, 48, 57, 64, 65, 67, 68, 69, 70, 71], "initi": [3, 27, 51, 53, 55, 57, 59, 60, 61, 62, 68], "train": [3, 9, 27, 28, 29, 35, 37, 39, 41, 43, 48, 70, 71, 72], "start": 3, "ar": [3, 9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 48, 57, 58, 59, 67, 68], "specifi": [3, 4, 9, 25, 32, 34, 48, 57], "yet": [3, 25, 48], "paramet": [3, 4, 8, 9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 47, 48, 51, 53, 55, 57, 60, 61, 62, 64, 65], "str": [3, 4, 8, 9, 25, 48], "name": [3, 4, 8, 9, 68, 69], "input": [4, 9, 14, 16, 18, 20, 22, 25, 27, 29, 32, 33, 34, 47, 48, 64, 65], "variable_nam": 4, "lower_limit": 4, "upper_limit": 4, "an": [4, 9, 15, 25, 67, 68], "valu": [4, 14, 16, 18, 20, 22, 27, 29, 33, 34, 37, 39, 41, 43, 44, 45, 51, 53, 55, 57, 59, 60, 61, 62, 68, 69], "outsid": [4, 57], "rang": [4, 57], "thi": [4, 11, 14, 16, 18, 20, 22, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 53, 55, 57, 59, 67, 68, 69, 70, 71], "provid": [4, 8, 36, 38, 40, 42, 44, 46, 48, 59, 67], "within": [4, 35, 48], "limit": [4, 27, 70], "defin": [4, 9, 16, 20, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59], "lower": 4, "upper": 4, "bound": 4, "float": [4, 25, 27, 29, 37, 39, 41, 43, 48, 51, 53, 55, 57, 60, 61, 62], "The": [4, 5, 8, 11, 14, 16, 18, 20, 22, 25, 27, 29, 34, 47, 48, 51, 53, 55, 57, 64, 65, 67, 68, 69, 70, 71], "variabl": [4, 9, 25, 27, 29, 37, 39, 41, 43, 45, 48, 60, 61, 62], "associ": [4, 25], "arg": 5, "perform": [5, 25, 27, 29, 33, 34, 48, 51, 53, 55, 57], "matrix": [5, 9, 18, 20, 25, 27, 64, 65], "vector": [5, 9, 27, 39], "oper": [5, 25, 33, 34], "two": [5, 9, 21, 25, 47, 64, 65], "object": [5, 9, 45, 48, 64, 65], "non": [5, 18], "compat": [5, 64, 65], "size": [5, 25, 27, 47, 48], "from": [5, 8, 14, 16, 18, 20, 22, 27, 29, 33, 34, 37, 39, 41, 43, 47, 48, 67, 68, 69, 70, 71], "neighbor": [5, 68], "import": [5, 8, 47, 48, 72], "knnclassifi": [5, 8, 68], "x": [5, 9, 14, 16, 18, 22, 25, 48, 67, 70], "np": [5, 16, 18, 20, 29, 31, 48, 68, 69, 70, 71], "random": [5, 29, 68, 69, 70], "randn": 5, "2": [5, 16, 22, 48, 64, 68, 69, 70, 71], "3": [5, 9, 68, 69, 70, 71], "y": [5, 9, 37, 39, 41, 43, 48, 60, 61, 62, 70], "4": [5, 47, 48, 68, 69, 70, 71], "_compute_dist": [5, 9], "can": [5, 9, 14, 25, 27, 48, 67], "comput": [5, 9, 14, 16, 18, 20, 22, 27, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 60, 64, 65], "k": [7, 9, 20, 68], "nearest": [7, 9], "classifi": [7, 9], "except": [7, 8, 9, 46, 47], "metric": [8, 9, 48, 59], "unknown": 8, "method": [8, 9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 53, 55, 57, 59, 60, 61, 62], "user": [8, 20, 31], "abc": [8, 59], "implement": [8, 12, 23, 25, 35, 36, 38, 40, 42, 44, 46, 48, 49, 59, 61, 67, 72], "pleas": [8, 67], "euclidean": [9, 64], "base": [9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 48, 51, 53, 55, 57, 59, 60, 61, 62], "algorithm": [9, 51, 53, 55, 67, 72], "simpl": [9, 46], "intuit": 9, "machin": [9, 59, 63, 72], "learn": [9, 48, 51, 53, 55, 57, 59, 63, 72], "classif": [9, 16, 17, 19, 21, 36, 37, 38, 39, 48, 59, 60, 61], "regress": [9, 13, 16, 27, 48, 59, 62], "task": [9, 13, 20, 36, 37, 38, 39, 59], "In": [9, 27], "case": [9, 16, 20, 67], "predict": [9, 14, 16, 18, 20, 22, 37, 39, 41, 43, 44, 45, 48, 59, 60, 61, 62, 70, 71, 72], "data": [9, 25, 32, 33, 34, 37, 39, 41, 43, 48, 72], "point": 9, "major": 9, "averag": [9, 53, 55], "its": [9, 37, 39, 41, 43], "featur": [9, 27], "space": 9, "follow": [9, 16, 20, 22, 27, 67], "support": [9, 20, 27, 67], "manhatten": [9, 65], "int": [9, 25, 27, 34, 47, 48], "option": [9, 25, 27, 37, 39, 41, 43, 48, 51, 53, 55, 57, 62], "number": [9, 25, 27, 29, 48, 51, 53, 55, 57, 64, 65, 68, 70, 71], "consid": 9, "new": [9, 37, 39, 41, 43, 67], "By": [9, 25], "default": [9, 25, 27, 37, 39, 41, 43, 48, 51, 53, 55, 57, 62], "calcul": [9, 16, 20, 22, 37, 39, 41, 43, 45, 51, 53, 55, 57, 59, 60, 61, 62], "distanc": [9, 64, 65], "list": [9, 37, 39, 41, 43, 48], "current": [9, 47, 51, 53, 55, 57], "unknownmetr": 9, "unknow": 9, "includ": [9, 11, 37, 39, 41, 43, 48], "spell": 9, "shapeerror": 9, "incompat": 9, "matric": 9, "attribut": 9, "x1": [9, 64, 65], "x2": [9, 64, 65], "between": [9, 21, 27, 48], "like": [9, 25, 64, 65], "One": 9, "must": [9, 20, 59, 64, 65, 67], "onli": [9, 20, 68, 69, 70, 71], "one": [9, 14, 18, 25, 39], "row": [9, 25], "alternativli": 9, "return": [9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 48, 51, 53, 55, 57, 60, 61, 62, 64, 65, 70], "type": [9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 48, 51, 53, 55, 57, 60, 61, 62, 64, 65], "arrai": [9, 18, 37, 39, 41, 43, 48, 51, 53, 55, 57, 60, 61, 62], "numpi": [9, 14, 16, 18, 20, 22, 25, 27, 29, 33, 34, 37, 39, 41, 43, 45, 48, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71], "ndarrai": [9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 48, 60, 61, 62, 64, 65], "consist": [9, 11, 58], "If": [9, 18, 25, 27, 29, 48, 51, 53, 55, 57], "shape": [9, 25, 32, 34, 64, 65], "do": [9, 47], "match": [9, 25, 47, 48, 64, 65], "fit": 9, "sinc": [9, 14, 20, 68], "lazi": [9, 68], "learner": [9, 68], "howev": [9, 16], "store": [9, 48], "memori": 9, "none": [9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 45, 48, 51, 53, 55, 57, 60, 61, 62], "label": [9, 37, 39, 48], "return_class_prob": 9, "fals": [9, 25, 29, 37, 39, 41, 43, 48, 62], "given": [9, 14, 25, 51, 53, 55, 57], "each": [9, 18, 20, 27, 29, 35, 39, 48, 51, 53, 55, 57, 67], "being": 9, "bool": [9, 25, 29, 37, 39, 41, 43, 48, 62], "set": [9, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 48, 71], "true": [9, 18, 25, 29, 37, 39, 41, 43, 48, 62, 69], "respect": [9, 25, 27, 37, 39, 41, 43, 44, 45], "probabl": [9, 29, 37, 39], "well": 9, "predicted_class": 9, "neural": [10, 11, 14, 16, 18, 20, 22, 23, 25, 27, 29, 31, 32, 35, 46, 48, 50, 51, 52, 53, 54, 55, 67, 72], "network": [10, 11, 13, 17, 19, 25, 27, 29, 31, 32, 35, 46, 48, 50, 51, 52, 53, 54, 55, 67, 72], "all": [11, 25], "part": 11, "actual": [11, 22], "neuron": [11, 27, 47], "node": 11, "connect": [11, 27, 48], "activ": [11, 44, 45, 48, 69, 70, 71], "function": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 58, 63, 67], "which": [11, 14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 36, 38, 40, 42, 44, 48, 71], "process": [11, 67, 72], "output": [11, 14, 16, 18, 20, 22, 25, 27, 29, 32, 33, 34, 37, 39, 41, 43, 47, 48], "term": [11, 37, 39, 41, 43, 64, 65], "abstract": [11, 22, 31, 59], "transform": [11, 69, 70, 71], "e": [11, 18, 20, 22, 48], "g": [11, 48], "dens": [11, 47, 48, 69, 70, 71], "dropout": [11, 48, 69, 71], "etc": [11, 18], "convolut": [11, 67, 72], "linear": [11, 16, 18], "sigmoid": 11, "softmax": [11, 16, 44, 45, 48, 69, 70, 71], "relu": [11, 48, 69, 70, 71], "variou": [12, 25, 35], "final": [13, 16, 17, 19], "compoment": [13, 17, 19], "_activ": [14, 16, 18, 20, 22], "deriv": [14, 16, 18, 20, 22, 27, 29, 33, 34], "f": [14, 16, 68, 69, 70, 71], "1": [14, 16, 18, 20, 22, 25, 27, 29, 48, 51, 57, 64, 67, 68, 69, 70, 71], "henc": 14, "": [14, 20, 25, 48, 67, 68, 72], "alwai": 14, "why": 14, "we": 14, "just": 14, "pass": [14, 16, 18, 20, 22, 25, 27, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "through": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 48, 72], "dvalu": [14, 16, 18, 20, 22, 25, 27, 29, 33, 34, 37, 39, 41, 43, 45], "previou": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 47, 48], "dure": [14, 25, 27, 28, 29, 48], "backpropag": 14, "step": [14, 16, 18, 20, 22, 25, 27, 31, 48, 72], "backward": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48], "keep": [14, 25, 29], "gradient": [14, 18, 20, 22, 25, 27, 29, 33, 34, 37, 39, 41, 43, 44, 45, 51, 53, 55, 56, 57], "revers": [14, 16, 18, 20, 22, 27, 29, 33, 34], "order": [14, 16, 18, 20, 22, 27, 29, 33, 34, 48], "forward": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 48], "convert": [14, 16, 18, 20, 22], "need": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 60, 61], "ani": [14, 16, 34, 48], "same": [14, 16, 25], "set_adjacent_lay": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34], "previous_lay": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34], "next_lay": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34], "adjac": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34], "iter": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 48, 51, 53, 55, 57], "_layer": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34, 37, 39, 41, 43, 48], "subsequ": [14, 16, 18, 20, 22, 25, 27, 29, 31, 33, 34], "mainli": [15, 21, 67], "hidden": 15, "rectifi": 16, "unit": [16, 29], "max": [16, 70, 71], "0": [16, 18, 25, 27, 48, 51, 53, 55, 57, 67, 68, 69, 70, 71], "frac": [16, 18, 20, 22], "begin": [16, 20], "text": [16, 20, 27], "otherwis": [16, 29, 57], "end": [16, 20], "loss": [16, 25, 27, 48, 69, 70, 71], "itself": 16, "without": [16, 29, 57, 67, 72], "chang": [16, 67, 68, 69, 70, 71], "practic": [16, 72], "rare": 16, "neither": 16, "nor": 16, "binari": [17, 18, 20, 29, 36, 37, 59, 60], "problem": [17, 19, 20, 36, 38], "alia": 17, "logist": 17, "sigma": [18, 20], "confid": [18, 20], "decod": 18, "mean": [18, 40, 41, 42, 43, 53, 55], "singl": [18, 25], "5": [18, 48, 68, 69, 70, 71], "than": 18, "outcom": 18, "todo": [18, 48], "check": [18, 48], "could": 18, "also": [18, 20, 27, 48, 59, 67], "either": [18, 25], "zero": [18, 27, 29, 51, 53, 55], "multiclass": [19, 20], "mathbf": 20, "z": 20, "_": [20, 27, 64, 65], "j": [20, 27], "z_": 20, "sum": [20, 27, 64, 65], "partial": 20, "cdot": [20, 27, 64], "neq": 20, "doe": [20, 27, 34, 48, 51, 53, 55, 57], "receiv": [20, 27, 29], "index": [20, 25, 27], "highest": 20, "score": 20, "indic": [20, 29, 48], "sinh": 22, "cosh": 22, "mathrm": 22, "2x": 22, "dfrac": 22, "d": [22, 64, 65], "dx": 22, "1d": 24, "2d": 24, "3d": 24, "in_channel": [25, 70], "out_channel": [25, 70], "kernel_shap": [25, 70], "conv_oper": 25, "cross": [25, 36, 37, 38, 39, 44, 45], "correl": 25, "pad": 25, "stride": 25, "weight_regularizer_l1": [25, 27], "weight_regularizer_l2": [25, 27, 69], "bias_regularizer_l1": [25, 27], "bias_regularizer_l2": [25, 27, 69], "_transform": [25, 27, 29, 31, 33, 34, 51, 53, 55, 57], "_trainabletransform": [25, 27, 48], "kernel": 25, "It": [25, 32, 34, 36, 38, 40, 42, 44, 51, 53, 55, 59, 67], "channel": 25, "depth": 25, "tupl": [25, 27, 34, 37, 39, 41, 43, 48], "integ": [25, 39], "treat": 25, "squar": [25, 40, 41, 42, 43, 51, 55], "should": [25, 48], "height": 25, "width": [25, 68, 69], "Not": 25, "appli": [25, 27, 29], "string": 25, "valid": [25, 48, 69, 71], "full": 25, "vertic": 25, "horizont": 25, "l1": [25, 27, 37, 39, 41, 43], "regular": [25, 27, 29, 37, 39, 41, 43, 48], "strength": [25, 27], "weight": [25, 27, 37, 39, 41, 43, 51, 53, 55, 57, 67], "l2": [25, 27, 37, 39, 41, 43], "bias": [25, 27, 37, 39, 41, 43, 51, 53, 55, 57], "format": 25, "flip_kernel": 25, "apply_kernel": 25, "x_slice": 25, "bia": [25, 27], "slice": 25, "A": [25, 48, 59, 65], "result": [25, 48, 60, 61, 62], "apply_pad": 25, "batch": [25, 48], "static": [25, 48], "apply_strid": 25, "dimens": 25, "column": [25, 64, 65, 68, 69], "kept": 25, "where": [25, 27, 48, 70], "first": [25, 27, 53, 67], "second": [25, 27, 53], "get_paramet": [25, 27], "set_paramet": [25, 27], "input_s": 27, "output_s": 27, "alpha": 27, "01": 27, "fulli": 27, "repres": [27, 32, 36, 37, 38, 39, 40, 42, 44], "th": 27, "n": [27, 64], "x_": 27, "w_": 27, "ij": 27, "allow": 27, "particular": 27, "both": [27, 36, 38, 40, 42, 53], "techniqu": [27, 72], "aim": 27, "prevent": [27, 29, 51, 53, 55], "overfit": [27, 28, 29], "call": 27, "lasso": 27, "context": [27, 48], "shrink": 27, "paramat": 27, "toward": 27, "make": [27, 67], "some": [27, 29, 58], "obsolet": 27, "interpret": 27, "kind": 27, "select": 27, "ridg": 27, "them": [27, 51, 53, 55, 57], "contrast": 27, "reduc": 27, "impact": 27, "equal": 27, "per": 27, "decreas": 27, "improv": 27, "dweight": 27, "dbias": 27, "formula": 27, "avoid": 28, "rate": [29, 48, 51, 53, 55, 57], "randomli": 29, "fraction": 29, "drop": 29, "remain": 29, "scale": [29, 51, 71], "gener": [29, 48], "mask": 29, "binary_mask": 29, "after": [29, 34, 48, 51, 53, 55, 57], "infer": 29, "replac": [29, 69], "creat": [29, 30], "simpli": [29, 34], "copi": 29, "nn": [30, 69, 70, 71], "instanc": [30, 60, 61, 62, 68], "handl": [31, 59], "commonli": [32, 35, 58], "flatten": [32, 70], "befor": [32, 34], "other": 32, "input_shap": 34, "output_shap": 34, "desir": 34, "note": 34, "have": [34, 51, 53, 55, 57], "learnabl": 34, "separ": [35, 51], "entropi": [36, 37, 38, 39, 44, 45], "binarycrossentropi": 36, "_loss": [37, 39, 41, 43, 48], "dinput": [37, 39, 41, 43, 45], "y_true": [37, 39, 41, 43, 45], "ground": [37, 39, 41, 43, 45, 59, 60, 61, 62], "truth": [37, 39, 41, 43, 45, 59, 60, 61, 62], "include_regular": [37, 39, 41, 43], "total": [37, 39, 41, 43, 48, 68], "whether": [37, 39, 41, 43, 48, 67, 72], "calculate_accumul": [37, 39, 41, 43, 60, 61, 62], "accumul": [37, 39, 41, 43, 59, 60, 61, 62], "over": [37, 39, 41, 43], "y_pred": [37, 39, 41, 43], "sampl": [37, 39, 41, 43], "wise": [37, 41, 43], "regularization_loss": [37, 39, 41, 43, 48], "trainabl": [37, 39, 41, 43, 48], "layer": [37, 39, 41, 43, 47, 48, 51, 53, 55, 57, 67, 69, 70, 71], "reset": [37, 39, 41, 43, 60, 61, 62, 67], "set_trainable_lay": [37, 39, 41, 43], "trainable_lay": [37, 39, 41, 43, 48], "categor": [38, 39, 44, 45], "multi": [38, 39, 59, 61], "categoricalcrossentropi": [38, 48, 69, 70, 71], "hot": 39, "encod": 39, "neg": 39, "log": 39, "likelihood": 39, "loss_meansquarederror": [40, 42], "_description_": 43, "combin": [44, 45], "activation_softmax_loss_categoricalcrossentropi": 44, "output_size_previous_lay": 47, "input_size_current_lay": 47, "consecut": 47, "ouput": 47, "add": [47, 48, 67], "16": [47, 48, 69, 70, 71], "activation_relu": 47, "layer_dens": 47, "20": [47, 69], "10": [47, 48, 69, 70, 71], "17": [47, 69], "build": [48, 67], "evalu": [48, 68, 69], "optim": [48, 67, 69, 70, 71], "_optim": [48, 51, 53, 55, 57], "updat": [48, 51, 53, 55, 57], "accuraci": [48, 70, 71], "_accuraci": [48, 59, 60, 61, 62], "finished_build": 48, "ha": 48, "been": 48, "built": [48, 67], "add_lay": [48, 69, 70, 71], "512": [48, 69, 71], "num_class": [48, 69], "set_loss": [48, 69, 70, 71], "set_optim": [48, 69, 70, 71], "adam": [48, 69, 70], "learning_r": [48, 51, 53, 55, 57, 69, 70, 71], "005": [48, 69], "decai": [48, 51, 53, 55, 57, 69], "5e": [48, 69], "set_accuraci": [48, 69, 70, 71], "multiclassaccuraci": [48, 59, 68, 69, 70, 71], "_forward": 48, "mode": 48, "These": [48, 67, 72], "convent": 48, "Be": 48, "awar": 48, "append": 48, "crucial": 48, "matter": 48, "ad": [48, 51, 53, 55], "inconsistentlayers": 48, "32": [48, 69], "target": 48, "architectur": 48, "up": 48, "prepar": 48, "check_hyperparamet": 48, "essenti": [48, 67], "hyperparametersnotspecifi": 48, "x_val": 48, "y_val": 48, "batch_siz": [48, 69, 70, 71], "verbos": [48, 69, 70, 71], "level": 48, "print": [48, 68, 69, 70, 71], "summari": 48, "entir": [48, 67], "get_model_paramet": 48, "_summary_": 48, "load": 48, "path": [48, 68, 69, 70, 71], "file": 48, "loaded_model": 48, "trained_model": 48, "load_model_paramet": 48, "print_summari": 48, "data_loss": [48, 69, 71], "achiev": 48, "compon": 48, "save_model": 48, "save": 48, "save_model_paramet": 48, "set_model_paramet": 48, "epoch": [48, 69, 70, 71], "validation_data": [48, 69, 70, 71], "print_summary_everi": [48, 69, 70, 71], "save_file_path": 48, "x_train": [48, 68, 69], "y_train": [48, 68, 69], "x_test": [48, 68, 69], "y_test": [48, 68, 69], "detail": 48, "everi": [48, 67], "NOT": 48, "popular": 49, "epsilon": [51, 53, 55], "1e": [51, 53, 55], "07": [51, 53, 55], "adapt": [51, 53, 55], "histor": [51, 55], "inform": [51, 72], "factor": [51, 53, 55, 57, 71], "small": [51, 53, 55], "denomin": [51, 53, 55], "divis": [51, 53, 55], "7": [51, 53, 55, 68, 69, 70, 71], "post_update_paramet": [51, 53, 55, 57], "counter": [51, 53, 55, 57], "pre_update_paramet": [51, 53, 55, 57], "update_paramet": [51, 53, 55, 57], "cach": [51, 53, 55], "001": [53, 55, 69, 70, 71], "beta_1": 53, "9": [53, 55, 68, 69, 71], "beta_2": 53, "999": [53, 69], "moment": 53, "estim": 53, "exponenti": [53, 55], "move": [53, 55], "uncent": 53, "varianc": 53, "momentum": [53, 57, 71], "accordingli": [53, 55], "rho": 55, "root": 55, "propag": 55, "stochast": [56, 57], "descent": [56, 57], "outsidespecifiedrang": 57, "repeatedli": 58, "differ": 59, "structur": 59, "subclass": [59, 60, 61, 62], "comparison": [59, 60, 61, 62], "specif": [59, 61], "compar": [59, 60, 61, 62], "binaryclassaccuraci": 59, "design": [59, 60], "regressionaccuraci": 59, "tailor": [59, 62], "precis": [59, 62], "init": [60, 61, 62, 67], "No": [60, 61], "reinit": 62, "reiniti": 62, "collect": 63, "common": 63, "rtype": [64, 65], "p": 64, "q": 64, "sqrt": 64, "q_": 64, "p_": 64, "b": 65, "left": 65, "a_": 65, "b_": 65, "right": 65, "excit": 67, "person": 67, "project": [67, 72], "dedic": 67, "explor": 67, "fundament": 67, "scratch": 67, "core": 67, "vision": 67, "behind": 67, "platform": 67, "continu": 67, "hand": 67, "experi": 67, "realm": 67, "As": 67, "discov": 67, "concept": 67, "thei": 67, "meticul": [67, 72], "code": 67, "integr": 67, "grow": 67, "repositori": 67, "tool": 67, "while": 67, "intend": 67, "product": 67, "lack": 67, "cuda": 67, "mai": 67, "speed": 67, "serv": 67, "invalu": 67, "educ": 67, "resourc": 67, "those": 67, "look": 67, "deepen": 67, "understand": [67, 72], "inner": [67, 72], "work": [67, 72], "you": [67, 72], "re": [67, 72], "novic": 67, "seek": 67, "grasp": 67, "enthusiast": [67, 72], "keen": 67, "nuanc": 67, "welcom": [67, 72], "join": 67, "journei": [67, 72], "togeth": [67, 72], "clone": 67, "git": 67, "http": 67, "github": 67, "com": 67, "irish": 67, "77": [67, 69], "py": 67, "ml": 67, "put": 67, "great": 67, "emphasi": 67, "eas": 67, "much": 67, "extra": 67, "complex": 67, "therefor": 67, "addit": 67, "clean": 67, "instal": 67, "pip": 67, "r": 67, "requirements_doc": 67, "txt": 67, "sure": 67, "sphinx": 67, "pandoc": 67, "local": 67, "web": 67, "server": 67, "execut": 67, "command": 67, "autobuild": 67, "doc": 67, "html": 67, "usual": 67, "access": 67, "under": 67, "address": 67, "127": [67, 69, 70], "8000": 67, "googl": 67, "guidelin": 67, "write": 67, "docstr": 67, "recommend": 67, "develop": 67, "individu": 67, "locat": 67, "directori": [67, 68, 69, 70, 71], "run": 67, "shell": 67, "m": 67, "test_knn": 67, "outsourc": 67, "pool": 67, "basic": 67, "forecast": 67, "uniform": 67, "still": 67, "necessari": [68, 69, 70, 71], "notebook": [68, 69, 70, 71, 72], "sy": [68, 69, 70, 71], "o": [68, 69, 70, 71], "insert": [68, 69, 70, 71], "abspath": [68, 69, 70, 71], "panda": [68, 69, 70, 71], "pd": [68, 69, 70, 71], "pyml": [68, 69, 70, 71, 72], "util": [68, 69, 70, 71], "sepal": [68, 69], "length": [68, 69], "cm": [68, 69], "petal": [68, 69], "df": [68, 69], "read_csv": [68, 69], "iri": [68, 69], "head": [68, 69], "setosa": [68, 69], "6": [68, 69, 70, 71], "msk": [68, 69], "rand": [68, 69], "len": [68, 69, 70], "8": [68, 69, 70, 71], "iloc": [68, 69], "fast": 68, "y_predict": [68, 69], "calcualt": 68, "correct": 68, "divid": 68, "96": [68, 69], "neural_network": [69, 70, 71], "versicolor": 69, "virginica": 69, "to_replac": 69, "inplac": 69, "15": 69, "num_featur": 69, "500": 69, "10000": 69, "acc": [69, 71], "366": 69, "455": 69, "454": 69, "reg_loss": [69, 71], "lr": [69, 71], "000": [69, 71], "103": 69, "125": 69, "116": 69, "114": 69, "002": 69, "111": 69, "196": 69, "160": 69, "158": 69, "091": 69, "295": 69, "170": 69, "168": 69, "099": 69, "250": 69, "109": 69, "107": 69, "268": 69, "191": 69, "189": 69, "100": 69, "357": 69, "104": 69, "149": 69, "147": 69, "096": 69, "241": 69, "150": 69, "148": 69, "098": 69, "101": 69, "11": [69, 70], "118": 69, "083": 69, "12": 69, "277": 69, "182": 69, "180": 69, "084": 69, "13": 69, "188": 69, "134": 69, "132": 69, "089": 69, "14": 69, "076": 69, "102": 69, "068": 69, "060": 69, "179": 69, "122": 69, "120": 69, "128": [69, 70], "18": 69, "152": 69, "131": 69, "129": 69, "130": 69, "19": 69, "045": 69, "042": 69, "21": 69, "321": 69, "209": 69, "207": 69, "054": 69, "22": 69, "053": 69, "23": 69, "047": 69, "24": 69, "041": 69, "25": 69, "304": 69, "166": 69, "164": 69, "26": 69, "27": 69, "095": 69, "28": [69, 70, 71], "259": 69, "133": 69, "039": 69, "29": 69, "192": 69, "190": 69, "051": 69, "30": 69, "050": 69, "31": 69, "044": 69, "138": 69, "136": 69, "33": 69, "186": 69, "057": [69, 71], "34": 69, "205": 69, "121": 69, "119": 69, "35": 69, "106": 69, "046": 69, "36": 69, "040": 69, "37": 69, "177": 69, "283": 69, "38": 69, "183": 69, "067": 69, "39": [69, 70], "117": 69, "003": 69, "185": 69, "40": [69, 70], "112": 69, "028": 69, "41": 69, "339": 69, "156": 69, "153": 69, "035": 69, "42": 69, "034": 69, "43": 69, "223": 69, "123": 69, "031": 69, "44": 69, "027": 69, "45": 69, "024": 69, "46": 69, "020": 69, "47": 69, "016": 69, "48": 69, "375": 69, "265": 69, "262": 69, "49": 69, "165": 69, "162": 69, "284": 69, "50": 69, "161": 69, "154": 69, "151": 69, "51": 69, "251": 69, "247": 69, "318": 69, "52": 69, "145": 69, "53": 69, "54": 69, "017": 69, "55": 69, "014": 69, "56": 69, "011": 69, "57": 69, "137": 69, "282": 69, "58": 69, "071": 69, "996": 69, "59": 69, "330": 69, "315": 69, "019": 69, "60": 69, "097": 69, "025": 69, "61": 69, "022": 69, "62": 69, "018": 69, "63": 69, "015": 69, "64": 69, "214": 69, "013": 69, "65": 69, "143": 69, "010": 69, "66": 69, "008": 69, "67": 69, "036": 69, "006": 69, "68": 69, "004": 69, "69": 69, "142": 69, "139": 69, "70": 69, "71": 69, "007": 69, "72": 69, "312": 69, "244": 69, "401": 69, "73": 69, "174": 69, "74": 69, "012": 69, "75": 69, "76": 69, "78": 69, "79": 69, "80": 69, "81": 69, "82": 69, "998": 69, "83": 69, "997": 69, "84": 69, "124": 69, "85": 69, "86": 69, "87": 69, "88": 69, "89": 69, "90": [69, 71], "141": 69, "91": 69, "221": [69, 71], "218": 69, "92": [69, 70], "93": 69, "194": 69, "94": 69, "95": 69, "348": 69, "023": 69, "97": 69, "98": [69, 71], "286": 69, "99": 69, "140": 69, "255": [69, 70, 71], "043": 69, "105": 69, "208": 69, "204": 69, "135": 69, "108": 69, "144": 69, "110": 69, "026": 69, "113": [69, 71], "115": 69, "009": 69, "384": 69, "200": 69, "032": 69, "033": 69, "029": 69, "126": 69, "021": 69, "271": 69, "267": 69, "049": 69, "055": 69, "187": 69, "065": 69, "063": 69, "056": 69, "037": 69, "181": 69, "146": 69, "038": 69, "078": 69, "073": 69, "287": 69, "235": 69, "231": 69, "155": 69, "157": 69, "159": 69, "232": 69, "163": 69, "213": 69, "167": 69, "240": 69, "169": 69, "030": 69, "171": 69, "172": 69, "173": 69, "228": 69, "224": 69, "175": 69, "176": 69, "178": 69, "253": 69, "248": 69, "184": 69, "193": 69, "402": 69, "272": 69, "195": 69, "197": 69, "198": 69, "199": 69, "201": 69, "393": 69, "242": 69, "238": 69, "202": 69, "203": 69, "048": 69, "206": 69, "210": 69, "211": 69, "212": 69, "215": 69, "216": 69, "217": 69, "276": 69, "233": 69, "229": 69, "219": 69, "220": 69, "222": 69, "225": 69, "226": 69, "227": 69, "061": 69, "230": 69, "234": 69, "236": 69, "237": 69, "239": 69, "243": 69, "245": 69, "246": 69, "473": 69, "345": 69, "341": 69, "249": 69, "252": 69, "254": 69, "256": 69, "093": 69, "378": 69, "257": 69, "258": 69, "260": 69, "261": 69, "069": 69, "263": 69, "264": 69, "266": 69, "269": 69, "270": 69, "273": 69, "274": 69, "275": 69, "278": 69, "279": 69, "411": 69, "280": 69, "281": 69, "285": 69, "288": 69, "289": 69, "290": 69, "291": 69, "292": 69, "293": 69, "294": 69, "296": 69, "297": 69, "298": 69, "299": 69, "300": 69, "301": 69, "491": 69, "302": 69, "992": 69, "303": 69, "991": 69, "305": 69, "306": 69, "990": 69, "307": 69, "308": 69, "989": 69, "309": 69, "310": 69, "311": 69, "313": 69, "314": 69, "090": 69, "087": 69, "316": 69, "987": 69, "317": 69, "319": 69, "320": 69, "322": 69, "979": 69, "323": 69, "324": 69, "325": 69, "980": 69, "326": 69, "327": 69, "981": 69, "328": 69, "329": 69, "482": 69, "430": 69, "986": 69, "331": 69, "094": 69, "332": 69, "333": 69, "334": 69, "335": 69, "336": 69, "988": 69, "337": 69, "338": 69, "340": 69, "062": 69, "342": 69, "343": 69, "571": 69, "344": 69, "985": 69, "346": 69, "347": 69, "349": 69, "972": 69, "350": 69, "974": 69, "351": 69, "975": 69, "352": 69, "976": 69, "353": 69, "354": 69, "355": 69, "536": 69, "356": 69, "358": 69, "971": 69, "359": 69, "527": 69, "088": 69, "360": 69, "614": [69, 71], "361": 69, "958": 69, "362": 69, "509": 69, "079": 69, "363": 69, "956": 69, "364": 69, "365": 69, "960": 69, "545": 69, "367": 69, "368": 69, "369": 69, "397": 69, "370": 69, "371": 69, "957": 69, "372": 69, "075": 69, "547": 69, "373": 69, "949": 69, "374": 69, "951": 69, "953": 69, "376": 69, "438": 69, "377": 69, "950": 69, "379": 69, "064": 69, "380": 69, "381": 69, "382": 69, "944": 69, "383": 69, "943": 69, "385": 69, "518": 69, "386": 69, "387": 69, "388": 69, "389": 69, "927": 69, "390": 69, "085": 69, "472": 69, "391": 69, "921": 69, "392": 69, "924": 69, "928": 69, "394": 69, "395": 69, "396": 69, "923": 69, "398": 69, "399": 69, "931": 69, "400": 69, "934": 69, "643": 69, "478": 69, "403": 69, "914": 69, "404": 69, "530": 69, "405": 69, "797": 69, "406": 69, "407": 69, "593": 69, "408": 69, "572": 69, "409": 69, "894": 69, "410": 69, "890": 69, "412": 69, "052": 69, "666": 69, "413": 69, "414": 69, "415": 69, "416": 69, "718": 69, "417": 69, "418": 69, "420": 69, "419": 69, "845": 69, "688": [69, 71], "874": 69, "868": 69, "421": 69, "933": 69, "066": 69, "422": 69, "616": 69, "907": 69, "901": 69, "932": 69, "423": 69, "705": 69, "852": 69, "846": 69, "424": 69, "966": 69, "425": 69, "804": 69, "798": 69, "730": 69, "426": 69, "607": 69, "867": 69, "861": 69, "719": 69, "427": 69, "652": 69, "820": 69, "814": 69, "811": 69, "428": 69, "750": [69, 71], "744": 69, "429": 69, "554": [69, 71], "929": 69, "686": 69, "806": 69, "800": 69, "644": 69, "431": 69, "670": 69, "771": 69, "765": 69, "625": [69, 71], "432": 69, "734": 69, "433": 69, "851": 69, "434": 69, "661": 69, "704": 69, "698": 69, "435": 69, "692": 69, "436": 69, "757": 69, "437": 69, "641": 69, "635": 69, "638": 69, "632": 69, "439": 69, "640": 69, "633": 69, "440": 69, "601": 69, "086": 69, "441": 69, "634": 69, "623": 69, "442": 69, "555": 69, "549": 69, "443": 69, "723": 69, "585": 69, "579": 69, "058": 69, "444": 69, "679": [69, 71], "565": 69, "559": 69, "445": 69, "562": 69, "556": 69, "446": 69, "696": 69, "586": 69, "580": 69, "447": 69, "568": 69, "561": 69, "448": 69, "741": 69, "497": 69, "449": 69, "714": 69, "450": 69, "514": 69, "507": 69, "451": 69, "548": 69, "452": 69, "542": 69, "453": 69, "558": 69, "552": 69, "821": 69, "503": 69, "777": 69, "493": 69, "456": 69, "812": 69, "464": 69, "458": 69, "457": 69, "768": 69, "486": 69, "732": 69, "505": 69, "459": 69, "570": 69, "564": 69, "460": 69, "499": 69, "461": 69, "462": 69, "795": 69, "475": 69, "463": 69, "506": 69, "465": 69, "786": 69, "466": 69, "617": 69, "611": 69, "467": 69, "488": 69, "481": 69, "468": 69, "528": 69, "521": 69, "469": 69, "520": 69, "513": 69, "470": 69, "494": 69, "471": 69, "519": 69, "516": 69, "474": 69, "596": 69, "590": 69, "476": 69, "477": 69, "550": 69, "532": 69, "526": 69, "479": 69, "759": 69, "535": 69, "529": 69, "480": 69, "830": 69, "489": 69, "483": 69, "839": 69, "484": 69, "848": 69, "485": 69, "487": 69, "866": 69, "490": [69, 71], "492": 69, "938": 69, "902": 69, "495": 69, "857": 69, "496": 69, "875": [69, 71], "884": 69, "498": 69, "argmax": [69, 70, 71], "axi": 69, "9736842105263158": 69, "mnist": [70, 71], "scipi": [70, 71], "misc": [70, 71], "pil": [70, 71], "train_imag": [70, 71], "train_label": [70, 71], "test_imag": [70, 71], "test_label": [70, 71], "def": 70, "preprocess_binary_data": 70, "zero_index": 70, "one_index": 70, "all_indic": 70, "hstack": 70, "permut": 70, "reshap": 70, "astyp": [70, 71], "float32": [70, 71], "preprocess_data": 70, "1000": 70, "temporary_dir": 70, "var": 70, "folder": 70, "kt": 70, "fz2n770s5nl7x9529l2zhpww0000gn": 70, "t": 70, "resize_factor": [70, 71], "img": [70, 71], "uint8": [70, 71], "fromarrai": [70, 71], "resiz": [70, 71], "kernel_s": 70, "data_s": 70, "nb_maxpool": 70, "out_first_conv": 70, "1152": 70, "5555": 70, "pred": [70, 71], "sgd": 71, "993": 71, "717": 71, "772": 71, "752": 71, "819": 71, "753": 71, "626": 71, "844": 71, "better": 71, "represent": 71, "your": 72, "ultim": 72, "destin": 72, "how": 72, "leverag": 72, "our": 72, "craft": 72, "showcas": 72, "interact": 72, "jupyt": 72, "guid": 72, "test": 72, "dataset": 72, "research": 72, "aspir": 72, "scientist": 72, "offer": 72, "valuabl": 72, "insight": 72, "With": 72, "clear": 72, "instruct": 72, "ll": 72, "gain": 72, "deep": 72, "har": 72, "power": 72, "own": 72, "driven": 72, "let": 72, "trust": 72, "companion": 72, "master": 72, "dive": 72, "unlock": 72, "potenti": 72, "knn": 72, "imag": 72}, "objects": {"": [[0, 0, 0, "-", "pyml"]], "pyml": [[1, 0, 0, "-", "exceptions"], [6, 0, 0, "-", "neighbors"], [10, 0, 0, "-", "neural_network"], [58, 0, 0, "-", "utils"]], "pyml.exceptions": [[2, 0, 0, "-", "excpetions"]], "pyml.exceptions.excpetions": [[3, 1, 1, "", "HyperparametersNotSpecified"], [4, 1, 1, "", "OutsideSpecifiedRange"], [5, 1, 1, "", "ShapeError"]], "pyml.neighbors": [[7, 0, 0, "-", "knn"]], "pyml.neighbors.knn": [[8, 1, 1, "", "UnknownMetric"], [9, 2, 1, "", "kNNClassifier"]], "pyml.neighbors.knn.kNNClassifier": [[9, 3, 1, "", "_compute_distance"], [9, 3, 1, "", "fit"], [9, 3, 1, "", "predict"]], "pyml.neural_network": [[11, 0, 0, "-", "layer"], [35, 0, 0, "-", "loss"], [46, 0, 0, "-", "nn"], [49, 0, 0, "-", "optimizer"]], "pyml.neural_network.layer": [[12, 0, 0, "-", "activation"], [23, 0, 0, "-", "transformation"]], "pyml.neural_network.layer.activation": [[13, 0, 0, "-", "linear"], [15, 0, 0, "-", "relu"], [17, 0, 0, "-", "sigmoid"], [19, 0, 0, "-", "softmax"], [21, 0, 0, "-", "tanh"]], "pyml.neural_network.layer.activation.linear": [[14, 2, 1, "", "Linear"]], "pyml.neural_network.layer.activation.linear.Linear": [[14, 3, 1, "", "backward"], [14, 3, 1, "", "forward"], [14, 3, 1, "", "predictions"], [14, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.activation.relu": [[16, 2, 1, "", "ReLU"]], "pyml.neural_network.layer.activation.relu.ReLU": [[16, 3, 1, "", "backward"], [16, 3, 1, "", "forward"], [16, 3, 1, "", "predictions"], [16, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.activation.sigmoid": [[18, 2, 1, "", "Sigmoid"]], "pyml.neural_network.layer.activation.sigmoid.Sigmoid": [[18, 3, 1, "", "backward"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "predictions"], [18, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.activation.softmax": [[20, 2, 1, "", "Softmax"]], "pyml.neural_network.layer.activation.softmax.Softmax": [[20, 3, 1, "", "backward"], [20, 3, 1, "", "forward"], [20, 3, 1, "", "predictions"], [20, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.activation.tanh": [[22, 2, 1, "", "Tanh"]], "pyml.neural_network.layer.activation.tanh.Tanh": [[22, 3, 1, "", "backward"], [22, 3, 1, "", "forward"], [22, 3, 1, "", "predictions"], [22, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.transformation": [[24, 0, 0, "-", "convolutional"], [26, 0, 0, "-", "dense"], [28, 0, 0, "-", "dropout"], [30, 0, 0, "-", "input"], [32, 0, 0, "-", "reshape"]], "pyml.neural_network.layer.transformation.convolutional": [[25, 2, 1, "", "Convolutional"]], "pyml.neural_network.layer.transformation.convolutional.Convolutional": [[25, 3, 1, "", "apply_kernel"], [25, 3, 1, "", "apply_padding"], [25, 3, 1, "", "apply_striding"], [25, 3, 1, "", "backward"], [25, 3, 1, "", "forward"], [25, 3, 1, "", "get_parameters"], [25, 3, 1, "", "set_adjacent_layers"], [25, 3, 1, "", "set_parameters"]], "pyml.neural_network.layer.transformation.dense": [[27, 2, 1, "", "Dense"]], "pyml.neural_network.layer.transformation.dense.Dense": [[27, 3, 1, "", "backward"], [27, 3, 1, "", "forward"], [27, 3, 1, "", "get_parameters"], [27, 3, 1, "", "set_adjacent_layers"], [27, 3, 1, "", "set_parameters"]], "pyml.neural_network.layer.transformation.dropout": [[29, 2, 1, "", "Dropout"]], "pyml.neural_network.layer.transformation.dropout.Dropout": [[29, 3, 1, "", "backward"], [29, 3, 1, "", "forward"], [29, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.transformation.input": [[31, 2, 1, "", "Input"]], "pyml.neural_network.layer.transformation.input.Input": [[31, 3, 1, "", "backward"], [31, 3, 1, "", "forward"], [31, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.transformation.reshape": [[33, 2, 1, "", "Flatten"], [34, 2, 1, "", "Reshape"]], "pyml.neural_network.layer.transformation.reshape.Flatten": [[33, 3, 1, "", "backward"], [33, 3, 1, "", "forward"], [33, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.layer.transformation.reshape.Reshape": [[34, 3, 1, "", "backward"], [34, 3, 1, "", "forward"], [34, 3, 1, "", "set_adjacent_layers"]], "pyml.neural_network.loss": [[36, 0, 0, "-", "binary_cross_entropy"], [38, 0, 0, "-", "categorical_cross_entropy"], [40, 0, 0, "-", "mean_absolute_error"], [42, 0, 0, "-", "mean_squarred_error"], [44, 0, 0, "-", "softmax_loss_categorical_cross_entropy"]], "pyml.neural_network.loss.binary_cross_entropy": [[37, 2, 1, "", "BinaryCrossentropy"]], "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy": [[37, 3, 1, "", "backward"], [37, 3, 1, "", "calculate"], [37, 3, 1, "", "calculate_accumulated"], [37, 3, 1, "", "forward"], [37, 3, 1, "", "regularization_loss"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "set_trainable_layers"]], "pyml.neural_network.loss.categorical_cross_entropy": [[39, 2, 1, "", "CategoricalCrossentropy"]], "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy": [[39, 3, 1, "", "backward"], [39, 3, 1, "", "calculate"], [39, 3, 1, "", "calculate_accumulated"], [39, 3, 1, "", "forward"], [39, 3, 1, "", "regularization_loss"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "set_trainable_layers"]], "pyml.neural_network.loss.mean_absolute_error": [[41, 2, 1, "", "MeanAbsoluteError"]], "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError": [[41, 3, 1, "", "backward"], [41, 3, 1, "", "calculate"], [41, 3, 1, "", "calculate_accumulated"], [41, 3, 1, "", "forward"], [41, 3, 1, "", "regularization_loss"], [41, 3, 1, "", "reset"], [41, 3, 1, "", "set_trainable_layers"]], "pyml.neural_network.loss.mean_squarred_error": [[43, 2, 1, "", "MeanSquaredError"]], "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError": [[43, 3, 1, "", "backward"], [43, 3, 1, "", "calculate"], [43, 3, 1, "", "calculate_accumulated"], [43, 3, 1, "", "forward"], [43, 3, 1, "", "regularization_loss"], [43, 3, 1, "", "reset"], [43, 3, 1, "", "set_trainable_layers"]], "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy": [[45, 2, 1, "", "Softmax_CategoricalCrossentropy"]], "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy": [[45, 3, 1, "", "backward"]], "pyml.neural_network.nn": [[47, 1, 1, "", "InconsistentLayerSizes"], [48, 2, 1, "", "NN"]], "pyml.neural_network.nn.NN": [[48, 3, 1, "", "_forward"], [48, 3, 1, "", "add_layer"], [48, 3, 1, "", "backward"], [48, 3, 1, "", "build"], [48, 3, 1, "", "check_hyperparameters"], [48, 3, 1, "", "evaluate"], [48, 3, 1, "", "forward"], [48, 3, 1, "", "get_model_parameters"], [48, 3, 1, "", "load"], [48, 3, 1, "", "load_model_parameters"], [48, 3, 1, "", "predict"], [48, 3, 1, "", "print_summary"], [48, 3, 1, "", "save_model"], [48, 3, 1, "", "save_model_parameters"], [48, 3, 1, "", "set_accuracy"], [48, 3, 1, "", "set_loss"], [48, 3, 1, "", "set_model_parameters"], [48, 3, 1, "", "set_optimizer"], [48, 3, 1, "", "train"]], "pyml.neural_network.optimizer": [[50, 0, 0, "-", "adagrad"], [52, 0, 0, "-", "adam"], [54, 0, 0, "-", "rmsprop"], [56, 0, 0, "-", "sgd"]], "pyml.neural_network.optimizer.adagrad": [[51, 2, 1, "", "Adagrad"]], "pyml.neural_network.optimizer.adagrad.Adagrad": [[51, 3, 1, "", "post_update_parameters"], [51, 3, 1, "", "pre_update_parameters"], [51, 3, 1, "", "update_parameters"]], "pyml.neural_network.optimizer.adam": [[53, 2, 1, "", "Adam"]], "pyml.neural_network.optimizer.adam.Adam": [[53, 3, 1, "", "post_update_parameters"], [53, 3, 1, "", "pre_update_parameters"], [53, 3, 1, "", "update_parameters"]], "pyml.neural_network.optimizer.rmsprop": [[55, 2, 1, "", "RMSProp"]], "pyml.neural_network.optimizer.rmsprop.RMSProp": [[55, 3, 1, "", "post_update_parameters"], [55, 3, 1, "", "pre_update_parameters"], [55, 3, 1, "", "update_parameters"]], "pyml.neural_network.optimizer.sgd": [[57, 2, 1, "", "SGD"]], "pyml.neural_network.optimizer.sgd.SGD": [[57, 3, 1, "", "post_update_parameters"], [57, 3, 1, "", "pre_update_parameters"], [57, 3, 1, "", "update_parameters"]], "pyml.utils": [[59, 0, 0, "-", "accuracy"], [63, 0, 0, "-", "metrics"]], "pyml.utils.accuracy": [[60, 2, 1, "", "BinaryClassAccuracy"], [61, 2, 1, "", "MultiClassAccuracy"], [62, 2, 1, "", "RegressionAccuracy"]], "pyml.utils.accuracy.BinaryClassAccuracy": [[60, 3, 1, "", "calculate"], [60, 3, 1, "", "calculate_accumulated"], [60, 3, 1, "", "compare"], [60, 3, 1, "", "init"], [60, 3, 1, "", "reset"]], "pyml.utils.accuracy.MultiClassAccuracy": [[61, 3, 1, "", "calculate"], [61, 3, 1, "", "calculate_accumulated"], [61, 3, 1, "", "compare"], [61, 3, 1, "", "init"], [61, 3, 1, "", "reset"]], "pyml.utils.accuracy.RegressionAccuracy": [[62, 3, 1, "", "calculate"], [62, 3, 1, "", "calculate_accumulated"], [62, 3, 1, "", "compare"], [62, 3, 1, "", "init"], [62, 3, 1, "", "reset"]], "pyml.utils.metrics": [[64, 4, 1, "", "euclidean_distance"], [65, 4, 1, "", "manhatten_distance"]]}, "objtypes": {"0": "py:module", "1": "py:exception", "2": "py:class", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "exception", "Python exception"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"pyml": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67], "except": [1, 2, 3, 4, 5], "excpet": [2, 3, 4, 5], "hyperparametersnotspecifi": 3, "outsidespecifiedrang": 4, "shapeerror": 5, "exampl": [5, 8, 47, 48, 72], "neighbor": [6, 7, 8, 9], "knn": [7, 8, 9, 68], "unknownmetr": 8, "knnclassifi": 9, "neural_network": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "layer": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "activ": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "linear": [13, 14], "relu": [15, 16], "sigmoid": [17, 18], "softmax": [19, 20], "tanh": [21, 22], "transform": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "convolut": [24, 25, 70, 71], "dens": [26, 27], "dropout": [28, 29], "input": [30, 31], "reshap": [32, 33, 34, 71], "flatten": 33, "loss": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "binary_cross_entropi": [36, 37], "binarycrossentropi": 37, "categorical_cross_entropi": [38, 39], "categoricalcrossentropi": 39, "mean_absolute_error": [40, 41], "meanabsoluteerror": 41, "mean_squarred_error": [42, 43], "meansquarederror": 43, "softmax_loss_categorical_cross_entropi": [44, 45], "softmax_categoricalcrossentropi": 45, "nn": [46, 47, 48], "inconsistentlayers": 47, "optim": [49, 50, 51, 52, 53, 54, 55, 56, 57], "adagrad": [50, 51], "adam": [52, 53], "rmsprop": [54, 55], "sgd": [56, 57], "util": [58, 59, 60, 61, 62, 63, 64, 65], "accuraci": [59, 60, 61, 62, 68, 69], "class": 59, "binaryclassaccuraci": 60, "multiclassaccuraci": 61, "regressionaccuraci": 62, "metric": [63, 64, 65], "euclidean_dist": 64, "manhatten_dist": 65, "simpl": 67, "machin": 67, "learn": 67, "librari": 67, "contribut": 67, "document": 67, "test": [67, 68, 69, 71], "open": 67, "To": 67, "do": 67, "tutori": [68, 69, 70, 71, 72], "import": [68, 69, 70, 71], "read": [68, 69], "data": [68, 69, 70, 71], "creat": [68, 69], "train": [68, 69], "split": [68, 69], "fit": [68, 69], "model": [68, 69, 71], "make": [68, 69], "predict": [68, 69], "calcul": [68, 69], "neural": [69, 70, 71], "network": [69, 70, 71], "classif": [69, 70, 71, 72], "encod": 69, "target": 69, "variabl": 69, "build": [69, 70, 71], "imag": [70, 71], "prepar": [70, 71], "normal": [70, 71], "visual": 70, "without": 71, "singl": 71, "comput": 72, "vision": 72}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"pyml": [[0, "module-pyml"]], "pyml.exceptions": [[1, "module-pyml.exceptions"]], "pyml.exceptions.excpetions": [[2, "module-pyml.exceptions.excpetions"]], "pyml.exceptions.excpetions.HyperparametersNotSpecified": [[3, "pyml-exceptions-excpetions-hyperparametersnotspecified"]], "pyml.exceptions.excpetions.OutsideSpecifiedRange": [[4, "pyml-exceptions-excpetions-outsidespecifiedrange"]], "pyml.exceptions.excpetions.ShapeError": [[5, "pyml-exceptions-excpetions-shapeerror"]], "Examples": [[5, null], [8, null], [47, null], [48, null], [48, null], [48, null], [48, null], [48, null]], "pyml.neighbors": [[6, "module-pyml.neighbors"]], "pyml.neighbors.knn": [[7, "module-pyml.neighbors.knn"]], "pyml.neighbors.knn.UnknownMetric": [[8, "pyml-neighbors-knn-unknownmetric"]], "pyml.neighbors.knn.kNNClassifier": [[9, "pyml-neighbors-knn-knnclassifier"]], "pyml.neural_network": [[10, "module-pyml.neural_network"]], "pyml.neural_network.layer": [[11, "module-pyml.neural_network.layer"]], "pyml.neural_network.layer.activation": [[12, "module-pyml.neural_network.layer.activation"]], "pyml.neural_network.layer.activation.linear": [[13, "module-pyml.neural_network.layer.activation.linear"]], "pyml.neural_network.layer.activation.linear.Linear": [[14, "pyml-neural-network-layer-activation-linear-linear"]], "pyml.neural_network.layer.activation.relu": [[15, "module-pyml.neural_network.layer.activation.relu"]], "pyml.neural_network.layer.activation.relu.ReLU": [[16, "pyml-neural-network-layer-activation-relu-relu"]], "pyml.neural_network.layer.activation.sigmoid": [[17, "module-pyml.neural_network.layer.activation.sigmoid"]], "pyml.neural_network.layer.activation.sigmoid.Sigmoid": [[18, "pyml-neural-network-layer-activation-sigmoid-sigmoid"]], "pyml.neural_network.layer.activation.softmax": [[19, "module-pyml.neural_network.layer.activation.softmax"]], "pyml.neural_network.layer.activation.softmax.Softmax": [[20, "pyml-neural-network-layer-activation-softmax-softmax"]], "pyml.neural_network.layer.activation.tanh": [[21, "module-pyml.neural_network.layer.activation.tanh"]], "pyml.neural_network.layer.activation.tanh.Tanh": [[22, "pyml-neural-network-layer-activation-tanh-tanh"]], "pyml.neural_network.layer.transformation": [[23, "module-pyml.neural_network.layer.transformation"]], "pyml.neural_network.layer.transformation.convolutional": [[24, "module-pyml.neural_network.layer.transformation.convolutional"]], "pyml.neural_network.layer.transformation.convolutional.Convolutional": [[25, "pyml-neural-network-layer-transformation-convolutional-convolutional"]], "pyml.neural_network.layer.transformation.dense": [[26, "module-pyml.neural_network.layer.transformation.dense"]], "pyml.neural_network.layer.transformation.dense.Dense": [[27, "pyml-neural-network-layer-transformation-dense-dense"]], "pyml.neural_network.layer.transformation.dropout": [[28, "module-pyml.neural_network.layer.transformation.dropout"]], "pyml.neural_network.layer.transformation.dropout.Dropout": [[29, "pyml-neural-network-layer-transformation-dropout-dropout"]], "pyml.neural_network.layer.transformation.input": [[30, "module-pyml.neural_network.layer.transformation.input"]], "pyml.neural_network.layer.transformation.input.Input": [[31, "pyml-neural-network-layer-transformation-input-input"]], "pyml.neural_network.layer.transformation.reshape": [[32, "module-pyml.neural_network.layer.transformation.reshape"]], "pyml.neural_network.layer.transformation.reshape.Flatten": [[33, "pyml-neural-network-layer-transformation-reshape-flatten"]], "pyml.neural_network.layer.transformation.reshape.Reshape": [[34, "pyml-neural-network-layer-transformation-reshape-reshape"]], "pyml.neural_network.loss": [[35, "module-pyml.neural_network.loss"]], "pyml.neural_network.loss.binary_cross_entropy": [[36, "module-pyml.neural_network.loss.binary_cross_entropy"]], "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy": [[37, "pyml-neural-network-loss-binary-cross-entropy-binarycrossentropy"]], "pyml.neural_network.loss.categorical_cross_entropy": [[38, "module-pyml.neural_network.loss.categorical_cross_entropy"]], "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy": [[39, "pyml-neural-network-loss-categorical-cross-entropy-categoricalcrossentropy"]], "pyml.neural_network.loss.mean_absolute_error": [[40, "module-pyml.neural_network.loss.mean_absolute_error"]], "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError": [[41, "pyml-neural-network-loss-mean-absolute-error-meanabsoluteerror"]], "pyml.neural_network.loss.mean_squarred_error": [[42, "module-pyml.neural_network.loss.mean_squarred_error"]], "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError": [[43, "pyml-neural-network-loss-mean-squarred-error-meansquarederror"]], "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy": [[44, "module-pyml.neural_network.loss.softmax_loss_categorical_cross_entropy"]], "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy": [[45, "pyml-neural-network-loss-softmax-loss-categorical-cross-entropy-softmax-categoricalcrossentropy"]], "pyml.neural_network.nn": [[46, "module-pyml.neural_network.nn"]], "pyml.neural_network.nn.InconsistentLayerSizes": [[47, "pyml-neural-network-nn-inconsistentlayersizes"]], "pyml.neural_network.nn.NN": [[48, "pyml-neural-network-nn-nn"]], "pyml.neural_network.optimizer": [[49, "module-pyml.neural_network.optimizer"]], "pyml.neural_network.optimizer.adagrad": [[50, "module-pyml.neural_network.optimizer.adagrad"]], "pyml.neural_network.optimizer.adagrad.Adagrad": [[51, "pyml-neural-network-optimizer-adagrad-adagrad"]], "pyml.neural_network.optimizer.adam": [[52, "module-pyml.neural_network.optimizer.adam"]], "pyml.neural_network.optimizer.adam.Adam": [[53, "pyml-neural-network-optimizer-adam-adam"]], "pyml.neural_network.optimizer.rmsprop": [[54, "module-pyml.neural_network.optimizer.rmsprop"]], "pyml.neural_network.optimizer.rmsprop.RMSProp": [[55, "pyml-neural-network-optimizer-rmsprop-rmsprop"]], "pyml.neural_network.optimizer.sgd": [[56, "module-pyml.neural_network.optimizer.sgd"]], "pyml.neural_network.optimizer.sgd.SGD": [[57, "pyml-neural-network-optimizer-sgd-sgd"]], "pyml.utils": [[58, "module-pyml.utils"]], "pyml.utils.accuracy": [[59, "module-pyml.utils.accuracy"]], "Classes": [[59, "classes"]], "pyml.utils.accuracy.BinaryClassAccuracy": [[60, "pyml-utils-accuracy-binaryclassaccuracy"]], "pyml.utils.accuracy.MultiClassAccuracy": [[61, "pyml-utils-accuracy-multiclassaccuracy"]], "pyml.utils.accuracy.RegressionAccuracy": [[62, "pyml-utils-accuracy-regressionaccuracy"]], "pyml.utils.metrics": [[63, "module-pyml.utils.metrics"]], "pyml.utils.metrics.euclidean_distance": [[64, "pyml-utils-metrics-euclidean-distance"]], "pyml.utils.metrics.manhatten_distance": [[65, "pyml-utils-metrics-manhatten-distance"]], "PyML - a simple machine learning library": [[67, "pyml-a-simple-machine-learning-library"]], "Contributions": [[67, "contributions"]], "Documentation": [[67, "documentation"]], "Testing": [[67, "testing"]], "Open To-Dos": [[67, "open-to-dos"]], "Tutorial: kNN": [[68, "Tutorial:-kNN"]], "Imports": [[68, "Imports"], [69, "Imports"], [70, "Imports"], [71, "Imports"]], "Read data": [[68, "Read-data"], [69, "Read-data"]], "Create train-test-split": [[68, "Create-train-test-split"], [69, "Create-train-test-split"]], "\u201cTrain\u201d / fit the model on the train data": [[68, "%22Train%22-/-fit-the-model-on-the-train-data"], [69, "%22Train%22-/-fit-the-model-on-the-train-data"]], "Make predictions and calculate accuracy": [[68, "Make-predictions-and-calculate-accuracy"], [69, "Make-predictions-and-calculate-accuracy"]], "Tutorial: Neural Networks for classification": [[69, "Tutorial:-Neural-Networks-for-classification"]], "Encode target variable": [[69, "Encode-target-variable"]], "Build the neural network": [[69, "Build-the-neural-network"], [70, "Build-the-neural-network"], [71, "Build-the-neural-network"]], "Tutorial: Neural Networks for Image Classification with Convolution": [[70, "Tutorial:-Neural-Networks-for-Image-Classification-with-Convolution"]], "Prepare data": [[70, "Prepare-data"], [71, "Prepare-data"]], "Normalize data": [[70, "Normalize-data"], [71, "Normalize-data"]], "Visualize the data": [[70, "Visualize-the-data"]], "Tutorial: Neural Networks for Image Classification without Convolution": [[71, "Tutorial:-Neural-Networks-for-Image-Classification-without-Convolution"]], "Reshape data": [[71, "Reshape-data"]], "Test the model on a single image": [[71, "Test-the-model-on-a-single-image"]], "Examples and tutorials": [[72, "examples-and-tutorials"]], "Classification:": [[72, null]], "Computer Vision:": [[72, null]]}, "indexentries": {"module": [[0, "module-pyml"], [1, "module-pyml.exceptions"], [2, "module-pyml.exceptions.excpetions"], [6, "module-pyml.neighbors"], [7, "module-pyml.neighbors.knn"], [10, "module-pyml.neural_network"], [11, "module-pyml.neural_network.layer"], [12, "module-pyml.neural_network.layer.activation"], [13, "module-pyml.neural_network.layer.activation.linear"], [15, "module-pyml.neural_network.layer.activation.relu"], [17, "module-pyml.neural_network.layer.activation.sigmoid"], [19, "module-pyml.neural_network.layer.activation.softmax"], [21, "module-pyml.neural_network.layer.activation.tanh"], [23, "module-pyml.neural_network.layer.transformation"], [24, "module-pyml.neural_network.layer.transformation.convolutional"], [26, "module-pyml.neural_network.layer.transformation.dense"], [28, "module-pyml.neural_network.layer.transformation.dropout"], [30, "module-pyml.neural_network.layer.transformation.input"], [32, "module-pyml.neural_network.layer.transformation.reshape"], [35, "module-pyml.neural_network.loss"], [36, "module-pyml.neural_network.loss.binary_cross_entropy"], [38, "module-pyml.neural_network.loss.categorical_cross_entropy"], [40, "module-pyml.neural_network.loss.mean_absolute_error"], [42, "module-pyml.neural_network.loss.mean_squarred_error"], [44, "module-pyml.neural_network.loss.softmax_loss_categorical_cross_entropy"], [46, "module-pyml.neural_network.nn"], [49, "module-pyml.neural_network.optimizer"], [50, "module-pyml.neural_network.optimizer.adagrad"], [52, "module-pyml.neural_network.optimizer.adam"], [54, "module-pyml.neural_network.optimizer.rmsprop"], [56, "module-pyml.neural_network.optimizer.sgd"], [58, "module-pyml.utils"], [59, "module-pyml.utils.accuracy"], [63, "module-pyml.utils.metrics"]], "pyml": [[0, "module-pyml"]], "pyml.exceptions": [[1, "module-pyml.exceptions"]], "pyml.exceptions.excpetions": [[2, "module-pyml.exceptions.excpetions"]], "hyperparametersnotspecified": [[3, "pyml.exceptions.excpetions.HyperparametersNotSpecified"]], "outsidespecifiedrange": [[4, "pyml.exceptions.excpetions.OutsideSpecifiedRange"]], "shapeerror": [[5, "pyml.exceptions.excpetions.ShapeError"]], "pyml.neighbors": [[6, "module-pyml.neighbors"]], "pyml.neighbors.knn": [[7, "module-pyml.neighbors.knn"]], "unknownmetric": [[8, "pyml.neighbors.knn.UnknownMetric"]], "_compute_distance() (knnclassifier method)": [[9, "pyml.neighbors.knn.kNNClassifier._compute_distance"]], "fit() (knnclassifier method)": [[9, "pyml.neighbors.knn.kNNClassifier.fit"]], "knnclassifier (class in pyml.neighbors.knn)": [[9, "pyml.neighbors.knn.kNNClassifier"]], "predict() (knnclassifier method)": [[9, "pyml.neighbors.knn.kNNClassifier.predict"]], "pyml.neural_network": [[10, "module-pyml.neural_network"]], "pyml.neural_network.layer": [[11, "module-pyml.neural_network.layer"]], "pyml.neural_network.layer.activation": [[12, "module-pyml.neural_network.layer.activation"]], "pyml.neural_network.layer.activation.linear": [[13, "module-pyml.neural_network.layer.activation.linear"]], "linear (class in pyml.neural_network.layer.activation.linear)": [[14, "pyml.neural_network.layer.activation.linear.Linear"]], "backward() (linear method)": [[14, "pyml.neural_network.layer.activation.linear.Linear.backward"]], "forward() (linear method)": [[14, "pyml.neural_network.layer.activation.linear.Linear.forward"]], "predictions() (linear method)": [[14, "pyml.neural_network.layer.activation.linear.Linear.predictions"]], "set_adjacent_layers() (linear method)": [[14, "pyml.neural_network.layer.activation.linear.Linear.set_adjacent_layers"]], "pyml.neural_network.layer.activation.relu": [[15, "module-pyml.neural_network.layer.activation.relu"]], "relu (class in pyml.neural_network.layer.activation.relu)": [[16, "pyml.neural_network.layer.activation.relu.ReLU"]], "backward() (relu method)": [[16, "pyml.neural_network.layer.activation.relu.ReLU.backward"]], "forward() (relu method)": [[16, "pyml.neural_network.layer.activation.relu.ReLU.forward"]], "predictions() (relu method)": [[16, "pyml.neural_network.layer.activation.relu.ReLU.predictions"]], "set_adjacent_layers() (relu method)": [[16, "pyml.neural_network.layer.activation.relu.ReLU.set_adjacent_layers"]], "pyml.neural_network.layer.activation.sigmoid": [[17, "module-pyml.neural_network.layer.activation.sigmoid"]], "sigmoid (class in pyml.neural_network.layer.activation.sigmoid)": [[18, "pyml.neural_network.layer.activation.sigmoid.Sigmoid"]], "backward() (sigmoid method)": [[18, "pyml.neural_network.layer.activation.sigmoid.Sigmoid.backward"]], "forward() (sigmoid method)": [[18, "pyml.neural_network.layer.activation.sigmoid.Sigmoid.forward"]], "predictions() (sigmoid method)": [[18, "pyml.neural_network.layer.activation.sigmoid.Sigmoid.predictions"]], "set_adjacent_layers() (sigmoid method)": [[18, "pyml.neural_network.layer.activation.sigmoid.Sigmoid.set_adjacent_layers"]], "pyml.neural_network.layer.activation.softmax": [[19, "module-pyml.neural_network.layer.activation.softmax"]], "softmax (class in pyml.neural_network.layer.activation.softmax)": [[20, "pyml.neural_network.layer.activation.softmax.Softmax"]], "backward() (softmax method)": [[20, "pyml.neural_network.layer.activation.softmax.Softmax.backward"]], "forward() (softmax method)": [[20, "pyml.neural_network.layer.activation.softmax.Softmax.forward"]], "predictions() (softmax method)": [[20, "pyml.neural_network.layer.activation.softmax.Softmax.predictions"]], "set_adjacent_layers() (softmax method)": [[20, "pyml.neural_network.layer.activation.softmax.Softmax.set_adjacent_layers"]], "pyml.neural_network.layer.activation.tanh": [[21, "module-pyml.neural_network.layer.activation.tanh"]], "tanh (class in pyml.neural_network.layer.activation.tanh)": [[22, "pyml.neural_network.layer.activation.tanh.Tanh"]], "backward() (tanh method)": [[22, "pyml.neural_network.layer.activation.tanh.Tanh.backward"]], "forward() (tanh method)": [[22, "pyml.neural_network.layer.activation.tanh.Tanh.forward"]], "predictions() (tanh method)": [[22, "pyml.neural_network.layer.activation.tanh.Tanh.predictions"]], "set_adjacent_layers() (tanh method)": [[22, "pyml.neural_network.layer.activation.tanh.Tanh.set_adjacent_layers"]], "pyml.neural_network.layer.transformation": [[23, "module-pyml.neural_network.layer.transformation"]], "pyml.neural_network.layer.transformation.convolutional": [[24, "module-pyml.neural_network.layer.transformation.convolutional"]], "convolutional (class in pyml.neural_network.layer.transformation.convolutional)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional"]], "apply_kernel() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.apply_kernel"]], "apply_padding() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.apply_padding"]], "apply_striding() (convolutional static method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.apply_striding"]], "backward() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.backward"]], "forward() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.forward"]], "get_parameters() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.get_parameters"]], "set_adjacent_layers() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.set_adjacent_layers"]], "set_parameters() (convolutional method)": [[25, "pyml.neural_network.layer.transformation.convolutional.Convolutional.set_parameters"]], "pyml.neural_network.layer.transformation.dense": [[26, "module-pyml.neural_network.layer.transformation.dense"]], "dense (class in pyml.neural_network.layer.transformation.dense)": [[27, "pyml.neural_network.layer.transformation.dense.Dense"]], "backward() (dense method)": [[27, "pyml.neural_network.layer.transformation.dense.Dense.backward"]], "forward() (dense method)": [[27, "pyml.neural_network.layer.transformation.dense.Dense.forward"]], "get_parameters() (dense method)": [[27, "pyml.neural_network.layer.transformation.dense.Dense.get_parameters"]], "set_adjacent_layers() (dense method)": [[27, "pyml.neural_network.layer.transformation.dense.Dense.set_adjacent_layers"]], "set_parameters() (dense method)": [[27, "pyml.neural_network.layer.transformation.dense.Dense.set_parameters"]], "pyml.neural_network.layer.transformation.dropout": [[28, "module-pyml.neural_network.layer.transformation.dropout"]], "dropout (class in pyml.neural_network.layer.transformation.dropout)": [[29, "pyml.neural_network.layer.transformation.dropout.Dropout"]], "backward() (dropout method)": [[29, "pyml.neural_network.layer.transformation.dropout.Dropout.backward"]], "forward() (dropout method)": [[29, "pyml.neural_network.layer.transformation.dropout.Dropout.forward"]], "set_adjacent_layers() (dropout method)": [[29, "pyml.neural_network.layer.transformation.dropout.Dropout.set_adjacent_layers"]], "pyml.neural_network.layer.transformation.input": [[30, "module-pyml.neural_network.layer.transformation.input"]], "input (class in pyml.neural_network.layer.transformation.input)": [[31, "pyml.neural_network.layer.transformation.input.Input"]], "backward() (input method)": [[31, "pyml.neural_network.layer.transformation.input.Input.backward"]], "forward() (input method)": [[31, "pyml.neural_network.layer.transformation.input.Input.forward"]], "set_adjacent_layers() (input method)": [[31, "pyml.neural_network.layer.transformation.input.Input.set_adjacent_layers"]], "pyml.neural_network.layer.transformation.reshape": [[32, "module-pyml.neural_network.layer.transformation.reshape"]], "flatten (class in pyml.neural_network.layer.transformation.reshape)": [[33, "pyml.neural_network.layer.transformation.reshape.Flatten"]], "backward() (flatten method)": [[33, "pyml.neural_network.layer.transformation.reshape.Flatten.backward"]], "forward() (flatten method)": [[33, "pyml.neural_network.layer.transformation.reshape.Flatten.forward"]], "set_adjacent_layers() (flatten method)": [[33, "pyml.neural_network.layer.transformation.reshape.Flatten.set_adjacent_layers"]], "reshape (class in pyml.neural_network.layer.transformation.reshape)": [[34, "pyml.neural_network.layer.transformation.reshape.Reshape"]], "backward() (reshape method)": [[34, "pyml.neural_network.layer.transformation.reshape.Reshape.backward"]], "forward() (reshape method)": [[34, "pyml.neural_network.layer.transformation.reshape.Reshape.forward"]], "set_adjacent_layers() (reshape method)": [[34, "pyml.neural_network.layer.transformation.reshape.Reshape.set_adjacent_layers"]], "pyml.neural_network.loss": [[35, "module-pyml.neural_network.loss"]], "pyml.neural_network.loss.binary_cross_entropy": [[36, "module-pyml.neural_network.loss.binary_cross_entropy"]], "binarycrossentropy (class in pyml.neural_network.loss.binary_cross_entropy)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy"]], "backward() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.backward"]], "calculate() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.calculate"]], "calculate_accumulated() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.calculate_accumulated"]], "forward() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.forward"]], "regularization_loss() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.regularization_loss"]], "reset() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.reset"]], "set_trainable_layers() (binarycrossentropy method)": [[37, "pyml.neural_network.loss.binary_cross_entropy.BinaryCrossentropy.set_trainable_layers"]], "pyml.neural_network.loss.categorical_cross_entropy": [[38, "module-pyml.neural_network.loss.categorical_cross_entropy"]], "categoricalcrossentropy (class in pyml.neural_network.loss.categorical_cross_entropy)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy"]], "backward() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.backward"]], "calculate() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.calculate"]], "calculate_accumulated() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.calculate_accumulated"]], "forward() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.forward"]], "regularization_loss() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.regularization_loss"]], "reset() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.reset"]], "set_trainable_layers() (categoricalcrossentropy method)": [[39, "pyml.neural_network.loss.categorical_cross_entropy.CategoricalCrossentropy.set_trainable_layers"]], "pyml.neural_network.loss.mean_absolute_error": [[40, "module-pyml.neural_network.loss.mean_absolute_error"]], "meanabsoluteerror (class in pyml.neural_network.loss.mean_absolute_error)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError"]], "backward() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.backward"]], "calculate() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.calculate"]], "calculate_accumulated() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.calculate_accumulated"]], "forward() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.forward"]], "regularization_loss() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.regularization_loss"]], "reset() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.reset"]], "set_trainable_layers() (meanabsoluteerror method)": [[41, "pyml.neural_network.loss.mean_absolute_error.MeanAbsoluteError.set_trainable_layers"]], "pyml.neural_network.loss.mean_squarred_error": [[42, "module-pyml.neural_network.loss.mean_squarred_error"]], "meansquarederror (class in pyml.neural_network.loss.mean_squarred_error)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError"]], "backward() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.backward"]], "calculate() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.calculate"]], "calculate_accumulated() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.calculate_accumulated"]], "forward() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.forward"]], "regularization_loss() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.regularization_loss"]], "reset() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.reset"]], "set_trainable_layers() (meansquarederror method)": [[43, "pyml.neural_network.loss.mean_squarred_error.MeanSquaredError.set_trainable_layers"]], "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy": [[44, "module-pyml.neural_network.loss.softmax_loss_categorical_cross_entropy"]], "softmax_categoricalcrossentropy (class in pyml.neural_network.loss.softmax_loss_categorical_cross_entropy)": [[45, "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy"]], "backward() (softmax_categoricalcrossentropy method)": [[45, "pyml.neural_network.loss.softmax_loss_categorical_cross_entropy.Softmax_CategoricalCrossentropy.backward"]], "pyml.neural_network.nn": [[46, "module-pyml.neural_network.nn"]], "inconsistentlayersizes": [[47, "pyml.neural_network.nn.InconsistentLayerSizes"]], "nn (class in pyml.neural_network.nn)": [[48, "pyml.neural_network.nn.NN"]], "_forward() (nn method)": [[48, "pyml.neural_network.nn.NN._forward"]], "add_layer() (nn method)": [[48, "pyml.neural_network.nn.NN.add_layer"]], "backward() (nn method)": [[48, "pyml.neural_network.nn.NN.backward"]], "build() (nn method)": [[48, "pyml.neural_network.nn.NN.build"]], "check_hyperparameters() (nn method)": [[48, "pyml.neural_network.nn.NN.check_hyperparameters"]], "evaluate() (nn method)": [[48, "pyml.neural_network.nn.NN.evaluate"]], "forward() (nn method)": [[48, "pyml.neural_network.nn.NN.forward"]], "get_model_parameters() (nn method)": [[48, "pyml.neural_network.nn.NN.get_model_parameters"]], "load() (nn static method)": [[48, "pyml.neural_network.nn.NN.load"]], "load_model_parameters() (nn method)": [[48, "pyml.neural_network.nn.NN.load_model_parameters"]], "predict() (nn method)": [[48, "pyml.neural_network.nn.NN.predict"]], "print_summary() (nn static method)": [[48, "pyml.neural_network.nn.NN.print_summary"]], "save_model() (nn method)": [[48, "pyml.neural_network.nn.NN.save_model"]], "save_model_parameters() (nn method)": [[48, "pyml.neural_network.nn.NN.save_model_parameters"]], "set_accuracy() (nn method)": [[48, "pyml.neural_network.nn.NN.set_accuracy"]], "set_loss() (nn method)": [[48, "pyml.neural_network.nn.NN.set_loss"]], "set_model_parameters() (nn method)": [[48, "pyml.neural_network.nn.NN.set_model_parameters"]], "set_optimizer() (nn method)": [[48, "pyml.neural_network.nn.NN.set_optimizer"]], "train() (nn method)": [[48, "pyml.neural_network.nn.NN.train"]], "pyml.neural_network.optimizer": [[49, "module-pyml.neural_network.optimizer"]], "pyml.neural_network.optimizer.adagrad": [[50, "module-pyml.neural_network.optimizer.adagrad"]], "adagrad (class in pyml.neural_network.optimizer.adagrad)": [[51, "pyml.neural_network.optimizer.adagrad.Adagrad"]], "post_update_parameters() (adagrad method)": [[51, "pyml.neural_network.optimizer.adagrad.Adagrad.post_update_parameters"]], "pre_update_parameters() (adagrad method)": [[51, "pyml.neural_network.optimizer.adagrad.Adagrad.pre_update_parameters"]], "update_parameters() (adagrad method)": [[51, "pyml.neural_network.optimizer.adagrad.Adagrad.update_parameters"]], "pyml.neural_network.optimizer.adam": [[52, "module-pyml.neural_network.optimizer.adam"]], "adam (class in pyml.neural_network.optimizer.adam)": [[53, "pyml.neural_network.optimizer.adam.Adam"]], "post_update_parameters() (adam method)": [[53, "pyml.neural_network.optimizer.adam.Adam.post_update_parameters"]], "pre_update_parameters() (adam method)": [[53, "pyml.neural_network.optimizer.adam.Adam.pre_update_parameters"]], "update_parameters() (adam method)": [[53, "pyml.neural_network.optimizer.adam.Adam.update_parameters"]], "pyml.neural_network.optimizer.rmsprop": [[54, "module-pyml.neural_network.optimizer.rmsprop"]], "rmsprop (class in pyml.neural_network.optimizer.rmsprop)": [[55, "pyml.neural_network.optimizer.rmsprop.RMSProp"]], "post_update_parameters() (rmsprop method)": [[55, "pyml.neural_network.optimizer.rmsprop.RMSProp.post_update_parameters"]], "pre_update_parameters() (rmsprop method)": [[55, "pyml.neural_network.optimizer.rmsprop.RMSProp.pre_update_parameters"]], "update_parameters() (rmsprop method)": [[55, "pyml.neural_network.optimizer.rmsprop.RMSProp.update_parameters"]], "pyml.neural_network.optimizer.sgd": [[56, "module-pyml.neural_network.optimizer.sgd"]], "sgd (class in pyml.neural_network.optimizer.sgd)": [[57, "pyml.neural_network.optimizer.sgd.SGD"]], "post_update_parameters() (sgd method)": [[57, "pyml.neural_network.optimizer.sgd.SGD.post_update_parameters"]], "pre_update_parameters() (sgd method)": [[57, "pyml.neural_network.optimizer.sgd.SGD.pre_update_parameters"]], "update_parameters() (sgd method)": [[57, "pyml.neural_network.optimizer.sgd.SGD.update_parameters"]], "pyml.utils": [[58, "module-pyml.utils"]], "pyml.utils.accuracy": [[59, "module-pyml.utils.accuracy"]], "binaryclassaccuracy (class in pyml.utils.accuracy)": [[60, "pyml.utils.accuracy.BinaryClassAccuracy"]], "calculate() (binaryclassaccuracy method)": [[60, "pyml.utils.accuracy.BinaryClassAccuracy.calculate"]], "calculate_accumulated() (binaryclassaccuracy method)": [[60, "pyml.utils.accuracy.BinaryClassAccuracy.calculate_accumulated"]], "compare() (binaryclassaccuracy method)": [[60, "pyml.utils.accuracy.BinaryClassAccuracy.compare"]], "init() (binaryclassaccuracy method)": [[60, "pyml.utils.accuracy.BinaryClassAccuracy.init"]], "reset() (binaryclassaccuracy method)": [[60, "pyml.utils.accuracy.BinaryClassAccuracy.reset"]], "multiclassaccuracy (class in pyml.utils.accuracy)": [[61, "pyml.utils.accuracy.MultiClassAccuracy"]], "calculate() (multiclassaccuracy method)": [[61, "pyml.utils.accuracy.MultiClassAccuracy.calculate"]], "calculate_accumulated() (multiclassaccuracy method)": [[61, "pyml.utils.accuracy.MultiClassAccuracy.calculate_accumulated"]], "compare() (multiclassaccuracy method)": [[61, "pyml.utils.accuracy.MultiClassAccuracy.compare"]], "init() (multiclassaccuracy method)": [[61, "pyml.utils.accuracy.MultiClassAccuracy.init"]], "reset() (multiclassaccuracy method)": [[61, "pyml.utils.accuracy.MultiClassAccuracy.reset"]], "regressionaccuracy (class in pyml.utils.accuracy)": [[62, "pyml.utils.accuracy.RegressionAccuracy"]], "calculate() (regressionaccuracy method)": [[62, "pyml.utils.accuracy.RegressionAccuracy.calculate"]], "calculate_accumulated() (regressionaccuracy method)": [[62, "pyml.utils.accuracy.RegressionAccuracy.calculate_accumulated"]], "compare() (regressionaccuracy method)": [[62, "pyml.utils.accuracy.RegressionAccuracy.compare"]], "init() (regressionaccuracy method)": [[62, "pyml.utils.accuracy.RegressionAccuracy.init"]], "reset() (regressionaccuracy method)": [[62, "pyml.utils.accuracy.RegressionAccuracy.reset"]], "pyml.utils.metrics": [[63, "module-pyml.utils.metrics"]], "euclidean_distance() (in module pyml.utils.metrics)": [[64, "pyml.utils.metrics.euclidean_distance"]], "manhatten_distance() (in module pyml.utils.metrics)": [[65, "pyml.utils.metrics.manhatten_distance"]]}})